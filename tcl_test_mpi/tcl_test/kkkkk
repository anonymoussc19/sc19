Available native events and hardware information.
--------------------------------------------------------------------------------
PAPI Version             : 5.2.0.0
Vendor string and code   : GenuineIntel (1)
Model string and code    : Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz (79)
CPU Revision             : 1.000000
CPUID Info               : Family: 6  Model: 79  Stepping: 1
CPU Max Megahertz        : 2401
CPU Min Megahertz        : 1200
Hdw Threads per core     : 1
Cores per Socket         : 14
Sockets                  : 2
NUMA Nodes               : 2
CPUs per Node            : 14
Total CPUs               : 28
Running in a VM          : no
Number Hardware Counters : 11
Max Multiplex Counters   : 64
--------------------------------------------------------------------------------

===============================================================================
 Native Events in Component: perf_event
===============================================================================
| ix86arch::UNHALTED_CORE_CYCLES                                               |
|            count core clock cycles whenever the clock signal on the specific |
|            core is running (not halted)                                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ix86arch::INSTRUCTION_RETIRED                                                |
|            count the number of instructions at retirement. For instructions t|
|            hat consists of multiple micro-ops, this event counts the retireme|
|            nt of the last micro-op of the instruction                        |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ix86arch::UNHALTED_REFERENCE_CYCLES                                          |
|            count reference clock cycles while the clock signal on the specifi|
|            c core is running. The reference clock operates at a fixed frequen|
|            cy, irrespective of core frequency changes due to performance stat|
|            e transitions                                                     |
--------------------------------------------------------------------------------
| ix86arch::LLC_REFERENCES                                                     |
|            count each request originating from the core to reference a cache |
|            line in the last level cache. The count may include speculation, b|
|            ut excludes cache line fills due to hardware prefetch             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
--------------------------------------------------------------------------------
| ix86arch::LLC_MISSES                                                         |
|            count each cache miss condition for references to the last level c|
|            ache. The event count may include speculation, but excludes cache |
|            line fills due to hardware prefetch                               |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
--------------------------------------------------------------------------------
| ix86arch::BRANCH_INSTRUCTIONS_RETIRED                                        |
|            count branch instructions at retirement. Specifically, this event |
|            counts the retirement of the last micro-op of a branch instruction|
|                                                                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ix86arch::MISPREDICTED_BRANCH_RETIRED                                        |
|            count mispredicted branch instructions at retirement. Specifically|
|            , this event counts at retirement of the last micro-op of a branch|
|             instruction in the architectural path of the execution and experi|
|            enced misprediction in the branch prediction hardware             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CPU_CYCLES                                               |
|            PERF_COUNT_HW_CPU_CYCLES                                          |
--------------------------------------------------------------------------------
| perf::CYCLES                                                                 |
|            PERF_COUNT_HW_CPU_CYCLES                                          |
--------------------------------------------------------------------------------
| perf::CPU-CYCLES                                                             |
|            PERF_COUNT_HW_CPU_CYCLES                                          |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_INSTRUCTIONS                                             |
|            PERF_COUNT_HW_INSTRUCTIONS                                        |
--------------------------------------------------------------------------------
| perf::INSTRUCTIONS                                                           |
|            PERF_COUNT_HW_INSTRUCTIONS                                        |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_REFERENCES                                         |
|            PERF_COUNT_HW_CACHE_REFERENCES                                    |
--------------------------------------------------------------------------------
| perf::CACHE-REFERENCES                                                       |
|            PERF_COUNT_HW_CACHE_REFERENCES                                    |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_MISSES                                             |
|            PERF_COUNT_HW_CACHE_MISSES                                        |
--------------------------------------------------------------------------------
| perf::CACHE-MISSES                                                           |
|            PERF_COUNT_HW_CACHE_MISSES                                        |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_BRANCH_INSTRUCTIONS                                      |
|            PERF_COUNT_HW_BRANCH_INSTRUCTIONS                                 |
--------------------------------------------------------------------------------
| perf::BRANCH-INSTRUCTIONS                                                    |
|            PERF_COUNT_HW_BRANCH_INSTRUCTIONS                                 |
--------------------------------------------------------------------------------
| perf::BRANCHES                                                               |
|            PERF_COUNT_HW_BRANCH_INSTRUCTIONS                                 |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_BRANCH_MISSES                                            |
|            PERF_COUNT_HW_BRANCH_MISSES                                       |
--------------------------------------------------------------------------------
| perf::BRANCH-MISSES                                                          |
|            PERF_COUNT_HW_BRANCH_MISSES                                       |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_BUS_CYCLES                                               |
|            PERF_COUNT_HW_BUS_CYCLES                                          |
--------------------------------------------------------------------------------
| perf::BUS-CYCLES                                                             |
|            PERF_COUNT_HW_BUS_CYCLES                                          |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_STALLED_CYCLES_FRONTEND                                  |
|            PERF_COUNT_HW_STALLED_CYCLES_FRONTEND                             |
--------------------------------------------------------------------------------
| perf::STALLED-CYCLES-FRONTEND                                                |
|            PERF_COUNT_HW_STALLED_CYCLES_FRONTEND                             |
--------------------------------------------------------------------------------
| perf::IDLE-CYCLES-FRONTEND                                                   |
|            PERF_COUNT_HW_STALLED_CYCLES_FRONTEND                             |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_STALLED_CYCLES_BACKEND                                   |
|            PERF_COUNT_HW_STALLED_CYCLES_BACKEND                              |
--------------------------------------------------------------------------------
| perf::STALLED-CYCLES-BACKEND                                                 |
|            PERF_COUNT_HW_STALLED_CYCLES_BACKEND                              |
--------------------------------------------------------------------------------
| perf::IDLE-CYCLES-BACKEND                                                    |
|            PERF_COUNT_HW_STALLED_CYCLES_BACKEND                              |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_REF_CPU_CYCLES                                           |
|            PERF_COUNT_HW_REF_CPU_CYCLES                                      |
--------------------------------------------------------------------------------
| perf::REF-CYCLES                                                             |
|            PERF_COUNT_HW_REF_CPU_CYCLES                                      |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_CPU_CLOCK                                                |
|            PERF_COUNT_SW_CPU_CLOCK                                           |
--------------------------------------------------------------------------------
| perf::CPU-CLOCK                                                              |
|            PERF_COUNT_SW_CPU_CLOCK                                           |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_TASK_CLOCK                                               |
|            PERF_COUNT_SW_TASK_CLOCK                                          |
--------------------------------------------------------------------------------
| perf::TASK-CLOCK                                                             |
|            PERF_COUNT_SW_TASK_CLOCK                                          |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_PAGE_FAULTS                                              |
|            PERF_COUNT_SW_PAGE_FAULTS                                         |
--------------------------------------------------------------------------------
| perf::PAGE-FAULTS                                                            |
|            PERF_COUNT_SW_PAGE_FAULTS                                         |
--------------------------------------------------------------------------------
| perf::FAULTS                                                                 |
|            PERF_COUNT_SW_PAGE_FAULTS                                         |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_CONTEXT_SWITCHES                                         |
|            PERF_COUNT_SW_CONTEXT_SWITCHES                                    |
--------------------------------------------------------------------------------
| perf::CONTEXT-SWITCHES                                                       |
|            PERF_COUNT_SW_CONTEXT_SWITCHES                                    |
--------------------------------------------------------------------------------
| perf::CS                                                                     |
|            PERF_COUNT_SW_CONTEXT_SWITCHES                                    |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_CPU_MIGRATIONS                                           |
|            PERF_COUNT_SW_CPU_MIGRATIONS                                      |
--------------------------------------------------------------------------------
| perf::CPU-MIGRATIONS                                                         |
|            PERF_COUNT_SW_CPU_MIGRATIONS                                      |
--------------------------------------------------------------------------------
| perf::MIGRATIONS                                                             |
|            PERF_COUNT_SW_CPU_MIGRATIONS                                      |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_PAGE_FAULTS_MIN                                          |
|            PERF_COUNT_SW_PAGE_FAULTS_MIN                                     |
--------------------------------------------------------------------------------
| perf::MINOR-FAULTS                                                           |
|            PERF_COUNT_SW_PAGE_FAULTS_MIN                                     |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_SW_PAGE_FAULTS_MAJ                                          |
|            PERF_COUNT_SW_PAGE_FAULTS_MAJ                                     |
--------------------------------------------------------------------------------
| perf::MAJOR-FAULTS                                                           |
|            PERF_COUNT_SW_PAGE_FAULTS_MAJ                                     |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_L1D                                                |
|            L1 data cache                                                     |
|     :READ                                                                    |
|            read access                                                       |
|     :WRITE                                                                   |
|            write access                                                      |
|     :PREFETCH                                                                |
|            prefetch access                                                   |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-LOADS                                                        |
|            L1 cache load accesses                                            |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-LOAD-MISSES                                                  |
|            L1 cache load misses                                              |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-STORES                                                       |
|            L1 cache store accesses                                           |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-STORE-MISSES                                                 |
|            L1 cache store misses                                             |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-PREFETCHES                                                   |
|            L1 cache prefetch accesses                                        |
--------------------------------------------------------------------------------
| perf::L1-DCACHE-PREFETCH-MISSES                                              |
|            L1 cache prefetch misses                                          |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_L1I                                                |
|            L1 instruction cache                                              |
|     :READ                                                                    |
|            read access                                                       |
|     :PREFETCH                                                                |
|            prefetch access                                                   |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::L1-ICACHE-LOADS                                                        |
|            L1I cache load accesses                                           |
--------------------------------------------------------------------------------
| perf::L1-ICACHE-LOAD-MISSES                                                  |
|            L1I cache load misses                                             |
--------------------------------------------------------------------------------
| perf::L1-ICACHE-PREFETCHES                                                   |
|            L1I cache prefetch accesses                                       |
--------------------------------------------------------------------------------
| perf::L1-ICACHE-PREFETCH-MISSES                                              |
|            L1I cache prefetch misses                                         |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_LL                                                 |
|            Last level cache                                                  |
|     :READ                                                                    |
|            read access                                                       |
|     :WRITE                                                                   |
|            write access                                                      |
|     :PREFETCH                                                                |
|            prefetch access                                                   |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::LLC-LOADS                                                              |
|            Last level cache load accesses                                    |
--------------------------------------------------------------------------------
| perf::LLC-LOAD-MISSES                                                        |
|            Last level cache load misses                                      |
--------------------------------------------------------------------------------
| perf::LLC-STORES                                                             |
|            Last level cache store accesses                                   |
--------------------------------------------------------------------------------
| perf::LLC-STORE-MISSES                                                       |
|            Last level cache store misses                                     |
--------------------------------------------------------------------------------
| perf::LLC-PREFETCHES                                                         |
|            Last level cache prefetch accesses                                |
--------------------------------------------------------------------------------
| perf::LLC-PREFETCH-MISSES                                                    |
|            Last level cache prefetch misses                                  |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_DTLB                                               |
|            Data Translation Lookaside Buffer                                 |
|     :READ                                                                    |
|            read access                                                       |
|     :WRITE                                                                   |
|            write access                                                      |
|     :PREFETCH                                                                |
|            prefetch access                                                   |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::DTLB-LOADS                                                             |
|            Data TLB load accesses                                            |
--------------------------------------------------------------------------------
| perf::DTLB-LOAD-MISSES                                                       |
|            Data TLB load misses                                              |
--------------------------------------------------------------------------------
| perf::DTLB-STORES                                                            |
|            Data TLB store accesses                                           |
--------------------------------------------------------------------------------
| perf::DTLB-STORE-MISSES                                                      |
|            Data TLB store misses                                             |
--------------------------------------------------------------------------------
| perf::DTLB-PREFETCHES                                                        |
|            Data TLB prefetch accesses                                        |
--------------------------------------------------------------------------------
| perf::DTLB-PREFETCH-MISSES                                                   |
|            Data TLB prefetch misses                                          |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_ITLB                                               |
|            Instruction Translation Lookaside Buffer                          |
|     :READ                                                                    |
|            read access                                                       |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::ITLB-LOADS                                                             |
|            Instruction TLB load accesses                                     |
--------------------------------------------------------------------------------
| perf::ITLB-LOAD-MISSES                                                       |
|            Instruction TLB load misses                                       |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_BPU                                                |
|            Branch Prediction Unit                                            |
|     :READ                                                                    |
|            read access                                                       |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::BRANCH-LOADS                                                           |
|            Branch  load accesses                                             |
--------------------------------------------------------------------------------
| perf::BRANCH-LOAD-MISSES                                                     |
|            Branch  load misses                                               |
--------------------------------------------------------------------------------
| perf::PERF_COUNT_HW_CACHE_NODE                                               |
|            Node memory access                                                |
|     :READ                                                                    |
|            read access                                                       |
|     :WRITE                                                                   |
|            write access                                                      |
|     :PREFETCH                                                                |
|            prefetch access                                                   |
|     :ACCESS                                                                  |
|            hit access                                                        |
|     :MISS                                                                    |
|            miss access                                                       |
--------------------------------------------------------------------------------
| perf::NODE-LOADS                                                             |
|            Node  load accesses                                               |
--------------------------------------------------------------------------------
| perf::NODE-LOAD-MISSES                                                       |
|            Node  load misses                                                 |
--------------------------------------------------------------------------------
| perf::NODE-STORES                                                            |
|            Node  store accesses                                              |
--------------------------------------------------------------------------------
| perf::NODE-STORE-MISSES                                                      |
|            Node  store misses                                                |
--------------------------------------------------------------------------------
| perf::NODE-PREFETCHES                                                        |
|            Node  prefetch accesses                                           |
--------------------------------------------------------------------------------
| perf::NODE-PREFETCH-MISSES                                                   |
|            Node  prefetch misses                                             |
--------------------------------------------------------------------------------
| perf_raw::r0000                                                              |
|            perf_events raw event syntax: r[0-9a-fA-F]+                       |
--------------------------------------------------------------------------------
| UNHALTED_CORE_CYCLES                                                         |
|            Count core clock cycles whenever the clock signal on the specific |
|            core is running (not halted)                                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UNHALTED_REFERENCE_CYCLES                                                    |
|            Unhalted reference cycles                                         |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| INSTRUCTION_RETIRED                                                          |
|            Number of instructions at retirement                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| INSTRUCTIONS_RETIRED                                                         |
|            This is an alias for INSTRUCTION_RETIRED                          |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BRANCH_INSTRUCTIONS_RETIRED                                                  |
|            Count branch instructions at retirement. Specifically, this event |
|            counts the retirement of the last micro-op of a branch instruction|
|                                                                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MISPREDICTED_BRANCH_RETIRED                                                  |
|            Count mispredicted branch instructions at retirement. Specifically|
|            , this event counts at retirement of the last micro-op of a branch|
|             instruction in the architectural path of the execution and experi|
|            enced misprediction in the branch prediction hardware             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BACLEARS                                                                     |
|            Branch re-steered                                                 |
|     :ANY                                                                     |
|            Number of front-end re-steers due to BPU misprediction            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BR_INST_EXEC                                                                 |
|            Branch instructions executed                                      |
|     :NONTAKEN_CONDITIONAL                                                    |
|            All macro conditional nontaken branch instructions                |
|     :NONTAKEN_COND                                                           |
|            All macro conditional nontaken branch instructions                |
|     :TAKEN_CONDITIONAL                                                       |
|            Taken speculative and retired macro-conditional branches          |
|     :TAKEN_COND                                                              |
|            Taken speculative and retired macro-conditional branches          |
|     :TAKEN_DIRECT_JUMP                                                       |
|            Taken speculative and retired macro-conditional branch instruction|
|            s excluding calls and indirects                                   |
|     :TAKEN_INDIRECT_JUMP_NON_CALL_RET                                        |
|            Taken speculative and retired indirect branches excluding calls an|
|            d returns                                                         |
|     :TAKEN_INDIRECT_NEAR_RETURN                                              |
|            Taken speculative and retired indirect branches with return mnemon|
|            ic                                                                |
|     :TAKEN_DIRECT_NEAR_CALL                                                  |
|            Taken speculative and retired direct near calls                   |
|     :ALL_CONDITIONAL                                                         |
|            Speculative and retired macro-conditional branches                |
|     :ALL_COND                                                                |
|            Speculative and retired macro-conditional branches                |
|     :ANY_COND                                                                |
|            Speculative and retired macro-conditional branches                |
|     :ALL_DIRECT_JMP                                                          |
|            Speculative and retired macro-unconditional branches excluding cal|
|            ls and indirects                                                  |
|     :ALL_INDIRECT_JUMP_NON_CALL_RET                                          |
|            Speculative and retired indirect branches excluding calls and retu|
|            rns                                                               |
|     :ALL_INDIRECT_NEAR_RETURN                                                |
|            Speculative and retired indirect return branches                  |
|     :ALL_DIRECT_NEAR_CALL                                                    |
|            Speculative and retired direct near calls                         |
|     :TAKEN_INDIRECT_NEAR_CALL                                                |
|            All indirect calls, including both register and memory indirect   |
|     :ALL_BRANCHES                                                            |
|            All branch instructions executed                                  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BR_INST_RETIRED                                                              |
|            Branch instructions retired (Precise Event)                       |
|     :CONDITIONAL                                                             |
|            Counts all taken and not taken macro conditional branch instructio|
|            ns                                                                |
|     :COND                                                                    |
|            Counts all taken and not taken macro conditional branch instructio|
|            ns                                                                |
|     :NEAR_CALL                                                               |
|            Counts all macro direct and indirect near calls                   |
|     :ALL_BRANCHES                                                            |
|            Counts all taken and not taken macro branches including far branch|
|            es (architectural event)                                          |
|     :NEAR_RETURN                                                             |
|            Counts the number of near ret instructions retired                |
|     :NOT_TAKEN                                                               |
|            Counts all not taken macro branch instructions retired            |
|     :NEAR_TAKEN                                                              |
|            Counts the number of near branch taken instructions retired       |
|     :FAR_BRANCH                                                              |
|            Counts the number of far branch instructions retired              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BR_MISP_EXEC                                                                 |
|            Mispredicted branches executed                                    |
|     :NONTAKEN_CONDITIONAL                                                    |
|            Not taken speculative and retired mispredicted macro conditional b|
|            ranches                                                           |
|     :NONTAKEN_COND                                                           |
|            Not taken speculative and retired mispredicted macro conditional b|
|            ranches                                                           |
|     :TAKEN_CONDITIONAL                                                       |
|            Taken speculative and retired mispredicted macro conditional branc|
|            hes                                                               |
|     :TAKEN_COND                                                              |
|            Taken speculative and retired mispredicted macro conditional branc|
|            hes                                                               |
|     :TAKEN_INDIRECT_JUMP_NON_CALL_RET                                        |
|            Taken speculative and retired mispredicted indirect branches exclu|
|            ding calls and returns                                            |
|     :ALL_CONDITIONAL                                                         |
|            Speculative and retired mispredicted macro conditional branches   |
|     :ANY_COND                                                                |
|            Speculative and retired mispredicted macro conditional branches   |
|     :ALL_INDIRECT_JUMP_NON_CALL_RET                                          |
|            All mispredicted indirect branches that are not calls nor returns |
|     :ALL_BRANCHES                                                            |
|            Speculative and retired mispredicted macro conditional branches   |
|     :TAKEN_INDIRECT_NEAR_CALL                                                |
|            Taken speculative and retired mispredicted indirect calls         |
|     :TAKEN_RETURN_NEAR                                                       |
|            Taken speculative and retired mispredicted direct returns         |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| BR_MISP_RETIRED                                                              |
|            Mispredicted retired branches (Precise Event)                     |
|     :CONDITIONAL                                                             |
|            All mispredicted macro conditional branch instructions            |
|     :COND                                                                    |
|            All mispredicted macro conditional branch instructions            |
|     :ALL_BRANCHES                                                            |
|            All mispredicted macro branches (architectural event)             |
|     :NEAR_TAKEN                                                              |
|            Number of near branch instructions retired that were mispredicted |
|            and taken                                                         |
|     :RET                                                                     |
|            Number of mispredicted ret instructions retired                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| CPL_CYCLES                                                                   |
|            Unhalted core cycles at a specific ring level                     |
|     :RING0                                                                   |
|            Unhalted core cycles when the thread is in ring 0                 |
|     :RING123                                                                 |
|            Unhalted core cycles when thread is in rings 1, 2, or 3           |
|     :RING0_TRANS                                                             |
|            Number of intervals between processor halts while thread is in rin|
|            g 0                                                               |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| CPU_CLK_THREAD_UNHALTED                                                      |
|            Count core clock cycles whenever the clock signal on the specific |
|            core is running (not halted)                                      |
|     :REF_XCLK                                                                |
|            Count Xclk pulses (100Mhz) when the core is unhalted              |
|     :REF_XCLK_ANY                                                            |
|            Count Xclk pulses (100Mhz) when the at least one thread on the phy|
|            sical core is unhalted                                            |
|     :REF_P                                                                   |
|            Cycles when the core is unhalted (count at 100 Mhz)               |
|     :THREAD_P                                                                |
|            Cycles when thread is not halted                                  |
|     :ONE_THREAD_ACTIVE                                                       |
|            Counts Xclk (100Mhz) pulses when this thread is unhalted and the o|
|            ther thread is halted                                             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| CPU_CLK_UNHALTED                                                             |
|            Count core clock cycles whenever the clock signal on the specific |
|            core is running (not halted)                                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| CYCLE_ACTIVITY                                                               |
|            Stalled cycles                                                    |
|     :CYCLES_L2_PENDING                                                       |
|            Cycles with pending L2 miss loads (must use with HT off only)     |
|     :CYCLES_LDM_PENDING                                                      |
|            Cycles with pending memory loads                                  |
|     :CYCLES_MEM_ANY                                                          |
|            Cycles with pending memory loads                                  |
|     :CYCLES_L1D_PENDING                                                      |
|            Cycles with pending L1D load cache misses                         |
|     :STALLS_LDM_PENDING                                                      |
|            Executions stalls when there is at least one pending demand load r|
|            equest                                                            |
|     :STALLS_L1D_PENDING                                                      |
|            Executions stalls while there is at least one L1D demand load outs|
|            tanding                                                           |
|     :STALLS_L2_PENDING                                                       |
|            Execution stalls while there is at least one L2 demand load pendin|
|            g outstanding                                                     |
|     :STALLS_TOTAL                                                            |
|            Cycles during which no instructions were executed in the execution|
|             stage of the pipeline                                            |
|     :CYCLES_NO_EXECUTE                                                       |
|            Cycles during which no instructions were executed in the execution|
|             stage of the pipeline                                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| DTLB_LOAD_MISSES                                                             |
|            Data TLB load misses                                              |
|     :MISS_CAUSES_A_WALK                                                      |
|            Misses in all DTLB levels that cause page walks                   |
|     :WALK_COMPLETED_4K                                                       |
|            Misses in all TLB levels causes a page walk that completes (4K)   |
|     :WALK_COMPLETED_2M_4M                                                    |
|            Misses in all TLB levels causes a page walk of 2MB/4MB page sizes |
|            that completes                                                    |
|     :WALK_COMPLETED_1G                                                       |
|            Misses in all TLB levels causes a page walk of 1GB page sizes that|
|             completes                                                        |
|     :WALK_COMPLETED                                                          |
|            Misses in all TLB levels causes a page walk of any page size that |
|            completes                                                         |
|     :WALK_DURATION                                                           |
|            Cycles when PMH is busy with page walks                           |
|     :STLB_HIT_4K                                                             |
|            Misses that miss the DTLB and hit the STLB (4KB)                  |
|     :STLB_HIT_2M                                                             |
|            Misses that miss the DTLB and hit the STLB (2MB)                  |
|     :STLB_HIT                                                                |
|            Number of cache load STLB hits. No page walk                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| DTLB_STORE_MISSES                                                            |
|            Data TLB store misses                                             |
|     :MISS_CAUSES_A_WALK                                                      |
|            Misses in all DTLB levels that cause page walks                   |
|     :WALK_COMPLETED_4K                                                       |
|            Misses in all TLB levels causes a page walk that completes (4K)   |
|     :WALK_COMPLETED_2M_4M                                                    |
|            Misses in all TLB levels causes a page walk of 2MB/4MB page sizes |
|            that completes                                                    |
|     :WALK_COMPLETED_1G                                                       |
|            Misses in all TLB levels causes a page walk of 1GB page sizes that|
|             completes                                                        |
|     :WALK_COMPLETED                                                          |
|            Misses in all TLB levels causes a page walk of any page size that |
|            completes                                                         |
|     :WALK_DURATION                                                           |
|            Cycles when PMH is busy with page walks                           |
|     :STLB_HIT_4K                                                             |
|            Misses that miss the DTLB and hit the STLB (4KB)                  |
|     :STLB_HIT_2M                                                             |
|            Misses that miss the DTLB and hit the STLB (2MB)                  |
|     :STLB_HIT                                                                |
|            Number of cache load STLB hits. No page walk                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| FP_ASSIST                                                                    |
|            X87 floating-point assists                                        |
|     :X87_OUTPUT                                                              |
|            Number of X87 FP assists due to output values                     |
|     :X87_INPUT                                                               |
|            Number of X87 FP assists due to input values                      |
|     :SIMD_OUTPUT                                                             |
|            Number of SIMD FP assists due to output values                    |
|     :SIMD_INPUT                                                              |
|            Number of SIMD FP assists due to input values                     |
|     :ANY                                                                     |
|            Cycles with any input/output SEE or FP assists                    |
|     :ALL                                                                     |
|            Cycles with any input and output SSE or FP assist                 |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| HLE_RETIRED                                                                  |
|            HLE execution (Precise Event)                                     |
|     :START                                                                   |
|            Number of times an HLE execution started                          |
|     :COMMIT                                                                  |
|            Number of times an HLE execution successfully committed           |
|     :ABORTED                                                                 |
|            Number of times an HLE execution aborted due to any reasons (multi|
|            ple categories may count as one) (Precise Event)                  |
|     :ABORTED_MISC1                                                           |
|            Number of times an HLE execution aborted due to various memory eve|
|            nts                                                               |
|     :ABORTED_MISC2                                                           |
|            Number of times an HLE execution aborted due to uncommon condition|
|            s                                                                 |
|     :ABORTED_MISC3                                                           |
|            Number of times an HLE execution aborted due to HLE-unfriendly ins|
|            tructions                                                         |
|     :ABORTED_MISC4                                                           |
|            Number of times an HLE execution aborted due to incompatible memor|
|            y type                                                            |
|     :ABORTED_MISC5                                                           |
|            Number of times an HLE execution aborted due to none of the other |
|            4 reasons (e.g., interrupt)                                       |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ICACHE                                                                       |
|            Instruction Cache                                                 |
|     :MISSES                                                                  |
|            Number of Instruction Cache, Streaming Buffer and Victim Cache Mis|
|            ses. Includes Uncacheable accesses                                |
|     :IFDATA_STALL                                                            |
|            Number of cycles where a code fetch is stalled due to L1 miss     |
|     :HIT                                                                     |
|            Number of Instruction Cache, Streaming Buffer and Victim Cache Rea|
|            ds. Includes cacheable and uncacheable accesses and uncacheable fe|
|            tches                                                             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| IDQ                                                                          |
|            IDQ operations                                                    |
|     :EMPTY                                                                   |
|            Cycles the Instruction Decode Queue (IDQ) is empty                |
|     :MITE_UOPS                                                               |
|            Number of uops delivered to Instruction Decode Queue (IDQ) from MI|
|            TE path                                                           |
|     :DSB_UOPS                                                                |
|            Number of uops delivered to Instruction Decode Queue (IDQ) from De|
|            code Stream Buffer (DSB) path                                     |
|     :MS_DSB_UOPS                                                             |
|            Uops initiated by Decode Stream Buffer (DSB) that are being delive|
|            red to Instruction Decode Queue (IDQ) while Microcode Sequencer (M|
|            S) is busy                                                        |
|     :MS_MITE_UOPS                                                            |
|            Uops initiated by MITE and delivered to Instruction Decode Queue (|
|            IDQ) while Microcode Sequencer (MS) is busy                       |
|     :MS_UOPS                                                                 |
|            Number of Uops were delivered into Instruction Decode Queue (IDQ) |
|            from MS, initiated by Decode Stream Buffer (DSB) or MITE          |
|     :MS_UOPS_CYCLES                                                          |
|            Number of cycles that Uops were delivered into Instruction Decode |
|            Queue (IDQ) when MS_Busy, initiated by Decode Stream Buffer (DSB) |
|            or MITE                                                           |
|     :MS_SWITCHES                                                             |
|            Number of cycles that Uops were delivered into Instruction Decode |
|            Queue (IDQ) when MS_Busy, initiated by Decode Stream Buffer (DSB) |
|            or MITE                                                           |
|     :MITE_UOPS_CYCLES                                                        |
|            Cycles when uops are being delivered to Instruction Decode Queue (|
|            IDQ) from MITE path                                               |
|     :DSB_UOPS_CYCLES                                                         |
|            Cycles when uops are being delivered to Instruction Decode Queue (|
|            IDQ) from Decode Stream Buffer (DSB) path                         |
|     :MS_DSB_UOPS_CYCLES                                                      |
|            Cycles when uops initiated by Decode Stream Buffer (DSB) are being|
|             delivered to Instruction Decode Queue (IDQ) while Microcode Seque|
|            ncer (MS) is busy                                                 |
|     :MS_DSB_OCCUR                                                            |
|            Deliveries to Instruction Decode Queue (IDQ) initiated by Decode S|
|            tream Buffer (DSB) while Microcode Sequencer (MS) is busy         |
|     :ALL_DSB_CYCLES_4_UOPS                                                   |
|            Cycles Decode Stream Buffer (DSB) is delivering 4 Uops            |
|     :ALL_DSB_CYCLES_ANY_UOPS                                                 |
|            Cycles Decode Stream Buffer (DSB) is delivering any Uop           |
|     :ALL_MITE_CYCLES_4_UOPS                                                  |
|            Cycles MITE is delivering 4 Uops                                  |
|     :ALL_MITE_CYCLES_ANY_UOPS                                                |
|            Cycles MITE is delivering any Uop                                 |
|     :ALL_MITE_UOPS                                                           |
|            Number of uops delivered to Instruction Decode Queue (IDQ) from an|
|            y path                                                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| IDQ_UOPS_NOT_DELIVERED                                                       |
|            Uops not delivered                                                |
|     :CORE                                                                    |
|            Count number of non-delivered uops to Resource Allocation Table (R|
|            AT)                                                               |
|     :CYCLES_0_UOPS_DELIV_CORE                                                |
|            Cycles per thread when 4 or more uops are not delivered to the Res|
|            ource Allocation Table (RAT) when backend is not stalled          |
|     :CYCLES_LE_1_UOP_DELIV_CORE                                              |
|            Cycles per thread when 3 or more uops are not delivered to the Res|
|            ource Allocation Table (RAT) when backend is not stalled          |
|     :CYCLES_LE_2_UOP_DELIV_CORE                                              |
|            Cycles with less than 2 uops delivered by the front end           |
|     :CYCLES_LE_3_UOP_DELIV_CORE                                              |
|            Cycles with less than 3 uops delivered by the front end           |
|     :CYCLES_FE_WAS_OK                                                        |
|            Cycles Front-End (FE) delivered 4 uops or Resource Allocation Tabl|
|            e (RAT) was stalling FE                                           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| INST_RETIRED                                                                 |
|            Number of instructions retired (Precise Event)                    |
|     :ANY_P                                                                   |
|            Number of instructions retired. General Counter - architectural ev|
|            ent                                                               |
|     :ALL                                                                     |
|            Precise instruction retired event with HW to reduce effect of PEBS|
|             shadow in IP distribution (Precise Event)                        |
|     :TOTAL_CYCLES                                                            |
|            Number of cycles using always true condition                      |
|     :PREC_DIST                                                               |
|            Precise instruction retired event with HW to reduce effect of PEBS|
|             shadow in IP distribution (Precise event)                        |
|     :X87                                                                     |
|            Number of FPU operations retired (instructions with no exceptions)|
|                                                                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| INT_MISC                                                                     |
|            Miscellaneous interruptions                                       |
|     :RECOVERY_CYCLES                                                         |
|            Cycles waiting for the checkpoints in Resource Allocation Table (R|
|            AT) to be recovered after Nuke due to all other cases except JECle|
|            ar (e.g. whenever a ucode assist is needed like SSE exception, mem|
|            ory disambiguation, etc...)                                       |
|     :RECOVERY_CYCLES_ANY                                                     |
|            Core cycles the allocator was stalled due to recovery from earlier|
|             clear event for any thread running on the physical core (e.g. mis|
|            prediction or memory nuke)                                        |
|     :RECOVERY_STALLS_COUNT                                                   |
|            Number of occurrences waiting for Machine Clears                  |
|     :RAT_STALL_CYCLES                                                        |
|            Cycles when the Resource Allocation Table (RAT) external stall eve|
|            nt is sent to the Instruction Decode Queue (IDQ) for the thread. A|
|            lso includes cycles when the allocator is serving another thread  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ITLB                                                                         |
|            Instruction TLB                                                   |
|     :ITLB_FLUSH                                                              |
|            Flushing of the Instruction TLB (ITLB) pages independent of page s|
|            ize                                                               |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ITLB_MISSES                                                                  |
|            Instruction TLB misses                                            |
|     :MISS_CAUSES_A_WALK                                                      |
|            Misses in all DTLB levels that cause page walks                   |
|     :WALK_COMPLETED_4K                                                       |
|            Misses in all TLB levels causes a page walk that completes (4KB)  |
|     :WALK_COMPLETED_2M_4M                                                    |
|            Misses in all TLB levels causes a page walk that completes (2MB/4M|
|            B)                                                                |
|     :WALK_COMPLETED_1G                                                       |
|            Misses in all TLB levels causes a page walk that completes (1GB)  |
|     :WALK_COMPLETED                                                          |
|            Misses in all TLB levels causes a page walk of any page size that |
|            completes                                                         |
|     :WALK_DURATION                                                           |
|            Cycles when PMH is busy with page walks                           |
|     :STLB_HIT_4K                                                             |
|            Misses that miss the DTLB and hit the STLB (4KB)                  |
|     :STLB_HIT_2M                                                             |
|            Misses that miss the DTLB and hit the STLB (2MB)                  |
|     :STLB_HIT                                                                |
|            Number of cache load STLB hits. No page walk                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L1D                                                                          |
|            L1D cache                                                         |
|     :REPLACEMENT                                                             |
|            L1D Data line replacements                                        |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L1D_PEND_MISS                                                                |
|            L1D pending misses                                                |
|     :PENDING                                                                 |
|            Cycles with L1D load misses outstanding                           |
|     :PENDING_CYCLES                                                          |
|            Cycles with L1D load misses outstanding                           |
|     :PENDING_CYCLES_ANY                                                      |
|            Cycles with L1D load misses outstanding from any thread           |
|     :OCCURRENCES                                                             |
|            Number L1D miss outstanding                                       |
|     :EDGE                                                                    |
|            Number L1D miss outstanding                                       |
|     :FB_FULL                                                                 |
|            Number of cycles a demand request was blocked due to Fill Buffer (|
|            FB) unavailability                                                |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L2_DEMAND_RQSTS                                                              |
|            Demand Data Read requests to L2                                   |
|     :WB_HIT                                                                  |
|            WB requests that hit L2 cache                                     |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L2_LINES_IN                                                                  |
|            L2 lines allocated                                                |
|     :I                                                                       |
|            L2 cache lines in I state filling L2                              |
|     :S                                                                       |
|            L2 cache lines in S state filling L2                              |
|     :E                                                                       |
|            L2 cache lines in E state filling L2                              |
|     :ALL                                                                     |
|            L2 cache lines filling L2                                         |
|     :ANY                                                                     |
|            L2 cache lines filling L2                                         |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L2_LINES_OUT                                                                 |
|            L2 lines evicted                                                  |
|     :DEMAND_CLEAN                                                            |
|            Number of clean L2 cachelines evicted by demand                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L2_RQSTS                                                                     |
|            L2 requests                                                       |
|     :DEMAND_DATA_RD_MISS                                                     |
|            Demand Data Read requests that miss L2 cache                      |
|     :DEMAND_DATA_RD_HIT                                                      |
|            Demand Data Read requests that hit L2 cache                       |
|     :DEMAND_RFO_MISS                                                         |
|            RFO requests that miss L2 cache                                   |
|     :RFO_MISS                                                                |
|            RFO requests that miss L2 cache                                   |
|     :DEMAND_RFO_HIT                                                          |
|            RFO requests that hit L2 cache                                    |
|     :RFO_HIT                                                                 |
|            RFO requests that hit L2 cache                                    |
|     :CODE_RD_MISS                                                            |
|            L2 cache misses when fetching instructions                        |
|     :ALL_DEMAND_MISS                                                         |
|            All demand requests that miss the L2 cache                        |
|     :CODE_RD_HIT                                                             |
|            L2 cache hits when fetching instructions, code reads              |
|     :L2_PF_MISS                                                              |
|            Requests from the L2 hardware prefetchers that miss L2 cache      |
|     :PF_MISS                                                                 |
|            Requests from the L2 hardware prefetchers that miss L2 cache      |
|     :MISS                                                                    |
|            All requests that miss the L2 cache                               |
|     :L2_PF_HIT                                                               |
|            Requests from the L2 hardware prefetchers that hit L2 cache       |
|     :PF_HIT                                                                  |
|            Requests from the L2 hardware prefetchers that hit L2 cache       |
|     :ALL_DEMAND_DATA_RD                                                      |
|            Any data read request to L2 cache                                 |
|     :ALL_RFO                                                                 |
|            Any data RFO request to L2 cache                                  |
|     :ALL_CODE_RD                                                             |
|            Any code read request to L2 cache                                 |
|     :ALL_DEMAND_REFERENCES                                                   |
|            All demand requests to L2 cache                                   |
|     :ALL_PF                                                                  |
|            Any L2 HW prefetch request to L2 cache                            |
|     :REFERENCES                                                              |
|            All requests to L2 cache                                          |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| L2_TRANS                                                                     |
|            L2 transactions                                                   |
|     :DEMAND_DATA_RD                                                          |
|            Demand Data Read requests that access L2 cache                    |
|     :RFO                                                                     |
|            RFO requests that access L2 cache                                 |
|     :CODE_RD                                                                 |
|            L2 cache accesses when fetching instructions                      |
|     :ALL_PF                                                                  |
|            L2 or L3 HW prefetches that access L2 cache, including rejects    |
|     :L1D_WB                                                                  |
|            L1D writebacks that access L2 cache                               |
|     :L2_FILL                                                                 |
|            L2 fill requests that access L2 cache                             |
|     :L2_WB                                                                   |
|            L2 writebacks that access L2 cache                                |
|     :ALL_REQUESTS                                                            |
|            Transactions accessing L2 pipe                                    |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LD_BLOCKS                                                                    |
|            Blocking loads                                                    |
|     :STORE_FORWARD                                                           |
|            Counts the number of loads blocked by overlapping with store buffe|
|            r entries that cannot be forwarded                                |
|     :NO_SR                                                                   |
|            number of times that split load operations are temporarily blocked|
|             because all resources for handling the split accesses are in use |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LD_BLOCKS_PARTIAL                                                            |
|            Partial load blocks                                               |
|     :ADDRESS_ALIAS                                                           |
|            False dependencies in MOB due to partial compare on address       |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LOAD_HIT_PRE                                                                 |
|            Load dispatches                                                   |
|     :HW_PF                                                                   |
|            Non software-prefetch load dispatches that hit FB allocated for ha|
|            rdware prefetch                                                   |
|     :SW_PF                                                                   |
|            Non software-prefetch load dispatches that hit FB allocated for so|
|            ftware prefetch                                                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LOCK_CYCLES                                                                  |
|            Locked cycles in L1D and L2                                       |
|     :SPLIT_LOCK_UC_LOCK_DURATION                                             |
|            Cycles in which the L1D and L2 are locked, due to a UC lock or spl|
|            it lock                                                           |
|     :CACHE_LOCK_DURATION                                                     |
|            cycles that the L1D is locked                                     |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LONGEST_LAT_CACHE                                                            |
|            L3 cache                                                          |
|     :MISS                                                                    |
|            Core-originated cacheable demand requests missed LLC - architectur|
|            al event                                                          |
|     :REFERENCE                                                               |
|            Core-originated cacheable demand requests that refer to LLC - arch|
|            itectural event                                                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MACHINE_CLEARS                                                               |
|            Machine clear asserted                                            |
|     :CYCLES                                                                  |
|            Cycles there was a Nuke. Account for both thread-specific and All |
|            Thread Nukes                                                      |
|     :MEMORY_ORDERING                                                         |
|            Number of Memory Ordering Machine Clears detected                 |
|     :SMC                                                                     |
|            Number of Self-modifying code (SMC) Machine Clears detected       |
|     :MASKMOV                                                                 |
|            This event counts the number of executed Intel AVX masked load ope|
|            rations that refer to an illegal address range with the mask bits |
|            set to 0                                                          |
|     :COUNT                                                                   |
|            Number of machine clears (nukes) of any type                      |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_LOAD_UOPS_L3_HIT_RETIRED                                                 |
|            L3 hit load uops retired (Precise Event)                          |
|     :XSNP_MISS                                                               |
|            Retired load uops which data sources were L3 hit and cross-core sn|
|            oop missed in on-pkg core cache                                   |
|     :XSNP_HIT                                                                |
|            Retired load uops which data sources were L3 and cross-core snoop |
|            hits in on-pkg core cache                                         |
|     :XSNP_HITM                                                               |
|            Load had HitM Response from a core on same socket (shared L3). (No|
|            n PEBS                                                            |
|     :XSNP_NONE                                                               |
|            Retired load uops which data sources were hits in L3 without snoop|
|            s required                                                        |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_LOAD_UOPS_LLC_HIT_RETIRED                                                |
|            L3 hit load uops retired (Precise Event)                          |
|     :XSNP_MISS                                                               |
|            Retired load uops which data sources were L3 hit and cross-core sn|
|            oop missed in on-pkg core cache                                   |
|     :XSNP_HIT                                                                |
|            Retired load uops which data sources were L3 and cross-core snoop |
|            hits in on-pkg core cache                                         |
|     :XSNP_HITM                                                               |
|            Load had HitM Response from a core on same socket (shared L3). (No|
|            n PEBS                                                            |
|     :XSNP_NONE                                                               |
|            Retired load uops which data sources were hits in L3 without snoop|
|            s required                                                        |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_LOAD_UOPS_L3_MISS_RETIRED                                                |
|            Load uops retired that missed the L3 (Precise Event)              |
|     :LOCAL_DRAM                                                              |
|            Retired load uops missing L3 cache but hitting local memory (Preci|
|            se Event)                                                         |
|     :REMOTE_DRAM                                                             |
|            Number of retired load uops that missed L3 but were service by rem|
|            ote RAM, snoop not needed, snoop miss, snoop hit data not forwarde|
|            d (Precise Event)                                                 |
|     :REMOTE_HITM                                                             |
|            Number of retired load uops whose data sources was remote HITM (Pr|
|            ecise Event)                                                      |
|     :REMOTE_FWD                                                              |
|            Load uops that miss in the L3 whose data source was forwarded from|
|             a remote cache (Precise Event)                                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_LOAD_UOPS_LLC_MISS_RETIRED                                               |
|            Load uops retired that missed the L3 (Precise Event)              |
|     :LOCAL_DRAM                                                              |
|            Retired load uops missing L3 cache but hitting local memory (Preci|
|            se Event)                                                         |
|     :REMOTE_DRAM                                                             |
|            Number of retired load uops that missed L3 but were service by rem|
|            ote RAM, snoop not needed, snoop miss, snoop hit data not forwarde|
|            d (Precise Event)                                                 |
|     :REMOTE_HITM                                                             |
|            Number of retired load uops whose data sources was remote HITM (Pr|
|            ecise Event)                                                      |
|     :REMOTE_FWD                                                              |
|            Load uops that miss in the L3 whose data source was forwarded from|
|             a remote cache (Precise Event)                                   |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_LOAD_UOPS_RETIRED                                                        |
|            Retired load uops (Precise Event)                                 |
|     :L1_HIT                                                                  |
|            Retired load uops with L1 cache hits as data source               |
|     :L2_HIT                                                                  |
|            Retired load uops with L2 cache hits as data source               |
|     :L3_HIT                                                                  |
|            Retired load uops with L3 cache hits as data source               |
|     :L1_MISS                                                                 |
|            Retired load uops which missed the L1D                            |
|     :L2_MISS                                                                 |
|            Retired load uops which missed the L2. Unknown data source exclude|
|            d                                                                 |
|     :L3_MISS                                                                 |
|            Retired load uops which missed the L3                             |
|     :HIT_LFB                                                                 |
|            Retired load uops which missed L1 but hit line fill buffer (LFB)  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MEM_TRANS_RETIRED                                                            |
|            Memory transactions retired (Precise Event)                       |
|     :LOAD_LATENCY                                                            |
|            Memory load instructions retired above programmed clocks, minimum |
|            threshold value is 3 (Precise Event and ldlat required)           |
|     :LATENCY_ABOVE_THRESHOLD                                                 |
|            Memory load instructions retired above programmed clocks, minimum |
|            threshold value is 3 (Precise Event and ldlat required)           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
--------------------------------------------------------------------------------
| MEM_UOPS_RETIRED                                                             |
|            Memory uops retired (Precise Event)                               |
|     :STLB_MISS_LOADS                                                         |
|            Load uops with true STLB miss retired to architected path         |
|     :STLB_MISS_STORES                                                        |
|            Store uops with true STLB miss retired to architected path        |
|     :LOCK_LOADS                                                              |
|            Load uops with locked access retired                              |
|     :SPLIT_LOADS                                                             |
|            Line-splitted load uops retired                                   |
|     :SPLIT_STORES                                                            |
|            Line-splitted store uops retired                                  |
|     :ALL_LOADS                                                               |
|            All load uops retired                                             |
|     :ALL_STORES                                                              |
|            All store uops retired                                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MISALIGN_MEM_REF                                                             |
|            Misaligned memory references                                      |
|     :LOADS                                                                   |
|            Speculative cache-line split load uops dispatched to the L1D      |
|     :STORES                                                                  |
|            Speculative cache-line split store-address uops dispatched to L1D |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| MOVE_ELIMINATION                                                             |
|            Move Elimination                                                  |
|     :INT_ELIMINATED                                                          |
|            Number of integer Move Elimination candidate uops that were elimin|
|            ated                                                              |
|     :SIMD_ELIMINATED                                                         |
|            Number of SIMD Move Elimination candidate uops that were eliminate|
|            d                                                                 |
|     :INT_NOT_ELIMINATED                                                      |
|            Number of integer Move Elimination candidate uops that were not el|
|            iminated                                                          |
|     :SIMD_NOT_ELIMINATED                                                     |
|            Number of SIMD Move Elimination candidate uops that were not elimi|
|            nated                                                             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OFFCORE_REQUESTS                                                             |
|            Demand Data Read requests sent to uncore                          |
|     :DEMAND_DATA_RD                                                          |
|            Demand data read requests sent to uncore (use with HT off only)   |
|     :DEMAND_CODE_RD                                                          |
|            Demand code read requests sent to uncore (use with HT off only)   |
|     :DEMAND_RFO                                                              |
|            Demand RFOs requests sent to uncore (use with HT off only)        |
|     :ALL_DATA_RD                                                             |
|            Data read requests sent to uncore (use with HT off only)          |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OTHER_ASSISTS                                                                |
|            Software assist                                                   |
|     :AVX_TO_SSE                                                              |
|            Number of transitions from AVX-256 to legacy SSE when penalty appl|
|            icable                                                            |
|     :SSE_TO_AVX                                                              |
|            Number of transitions from legacy SSE to AVX-256 when penalty appl|
|            icable                                                            |
|     :ANY_WB_ASSIST                                                           |
|            Number of times any microcode assist is invoked by HW upon uop wri|
|            teback                                                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| RESOURCE_STALLS                                                              |
|            Cycles Allocation is stalled due to Resource Related reason       |
|     :ANY                                                                     |
|            Cycles Allocation is stalled due to Resource Related reason       |
|     :ALL                                                                     |
|            Cycles Allocation is stalled due to Resource Related reason       |
|     :RS                                                                      |
|            Stall cycles caused by absence of eligible entries in Reservation |
|            Station (RS)                                                      |
|     :SB                                                                      |
|            Cycles Allocator is stalled due to Store Buffer full (not includin|
|            g draining from synch)                                            |
|     :ROB                                                                     |
|            ROB full stall cycles                                             |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ROB_MISC_EVENTS                                                              |
|            ROB miscellaneous events                                          |
|     :LBR_INSERTS                                                             |
|            Count each time an new Last Branch Record (LBR) is inserted       |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| RS_EVENTS                                                                    |
|            Reservation Station                                               |
|     :EMPTY_CYCLES                                                            |
|            Cycles the Reservation Station (RS) is empty for this thread      |
|     :EMPTY_END                                                               |
|            Number of times the reservation station (RS) was empty            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| RTM_RETIRED                                                                  |
|            Restricted Transaction Memory execution (Precise Event)           |
|     :START                                                                   |
|            Number of times an RTM execution started                          |
|     :COMMIT                                                                  |
|            Number of times an RTM execution successfully committed           |
|     :ABORTED                                                                 |
|            Number of times an RTM execution aborted due to any reasons (multi|
|            ple categories may count as one) (Precise Event)                  |
|     :ABORTED_MISC1                                                           |
|            Number of times an RTM execution aborted due to various memory eve|
|            nts                                                               |
|     :ABORTED_MISC2                                                           |
|            Number of times an RTM execution aborted due to uncommon condition|
|            s                                                                 |
|     :ABORTED_MISC3                                                           |
|            Number of times an RTM execution aborted due to RTM-unfriendly ins|
|            tructions                                                         |
|     :ABORTED_MISC4                                                           |
|            Number of times an RTM execution aborted due to incompatible memor|
|            y type                                                            |
|     :ABORTED_MISC5                                                           |
|            Number of times an RTM execution aborted due to none of the other |
|            4 reasons (e.g., interrupt)                                       |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| TLB_FLUSH                                                                    |
|            TLB flushes                                                       |
|     :DTLB_THREAD                                                             |
|            Count number of DTLB flushes of thread-specific entries           |
|     :STLB_ANY                                                                |
|            Count number of any STLB flushes                                  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UOPS_EXECUTED                                                                |
|            Uops executed                                                     |
|     :CORE                                                                    |
|            Number of uops executed from any thread                           |
|     :THREAD                                                                  |
|            Number of uops executed per thread each cycle                     |
|     :STALL_CYCLES                                                            |
|            Number of cycles with no uops executed                            |
|     :CYCLES_GE_1_UOP_EXEC                                                    |
|            Cycles where at least 1 uop was executed per thread               |
|     :CYCLES_GE_2_UOPS_EXEC                                                   |
|            Cycles where at least 2 uops were executed per thread             |
|     :CYCLES_GE_3_UOPS_EXEC                                                   |
|            Cycles where at least 3 uops were executed per thread             |
|     :CYCLES_GE_4_UOPS_EXEC                                                   |
|            Cycles where at least 4 uops were executed per thread             |
|     :CORE_CYCLES_GE_1                                                        |
|            Cycles where at least 1 uop was executed from any thread          |
|     :CORE_CYCLES_GE_2                                                        |
|            Cycles where at least 2 uops were executed from any thread        |
|     :CORE_CYCLES_GE_3                                                        |
|            Cycles where at least 3 uops were executed from any thread        |
|     :CORE_CYCLES_GE_4                                                        |
|            Cycles where at least 4 uops were executed from any thread        |
|     :CORE_CYCLES_NONE                                                        |
|            Cycles where no uop is executed on any thread                     |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| LSD                                                                          |
|            Loop stream detector                                              |
|     :UOPS                                                                    |
|            Number of uops delivered by the Loop Stream Detector (LSD)        |
|     :ACTIVE                                                                  |
|            Cycles with uops delivered by the LSD but which did not come from |
|            decoder                                                           |
|     :CYCLES_4_UOPS                                                           |
|            Cycles with 4 uops delivered by the LSD but which did not come fro|
|            m decoder                                                         |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UOPS_EXECUTED_PORT                                                           |
|            Uops dispatch to specific ports                                   |
|     :PORT_0                                                                  |
|            Cycles which a Uop is executed on port 0                          |
|     :PORT_1                                                                  |
|            Cycles which a Uop is executed on port 1                          |
|     :PORT_2                                                                  |
|            Cycles which a Uop is executed on port 2                          |
|     :PORT_3                                                                  |
|            Cycles which a Uop is executed on port 3                          |
|     :PORT_4                                                                  |
|            Cycles which a Uop is executed on port 4                          |
|     :PORT_5                                                                  |
|            Cycles which a Uop is executed on port 5                          |
|     :PORT_6                                                                  |
|            Cycles which a Uop is executed on port 6                          |
|     :PORT_7                                                                  |
|            Cycles which a Uop is executed on port 7                          |
|     :PORT_0_CORE                                                             |
|            tbd                                                               |
|     :PORT_1_CORE                                                             |
|            tbd                                                               |
|     :PORT_2_CORE                                                             |
|            tbd                                                               |
|     :PORT_3_CORE                                                             |
|            tbd                                                               |
|     :PORT_4_CORE                                                             |
|            tbd                                                               |
|     :PORT_5_CORE                                                             |
|            tbd                                                               |
|     :PORT_6_CORE                                                             |
|            tbd                                                               |
|     :PORT_7_CORE                                                             |
|            tbd                                                               |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UOPS_ISSUED                                                                  |
|            Uops issued                                                       |
|     :ANY                                                                     |
|            Number of Uops issued by the Resource Allocation Table (RAT) to th|
|            e Reservation Station (RS)                                        |
|     :ALL                                                                     |
|            Number of Uops issued by the Resource Allocation Table (RAT) to th|
|            e Reservation Station (RS)                                        |
|     :FLAGS_MERGE                                                             |
|            Number of flags-merge uops being allocated. Such uops adds delay  |
|     :SLOW_LEA                                                                |
|            Number of slow LEA or similar uops allocated. Such uop has 3 sourc|
|            es regardless if result of LEA instruction or not                 |
|     :SINGLE_MUL                                                              |
|            Number of Multiply packed/scalar single precision uops allocated  |
|     :STALL_CYCLES                                                            |
|            Counts the number of cycles no uops issued by this thread         |
|     :CORE_STALL_CYCLES                                                       |
|            Counts the number of cycles no uops issued on this core           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ARITH                                                                        |
|            Arithmetic uop                                                    |
|     :FPU_DIV_ACTIVE                                                          |
|            Cycles when divider is busy execuing divide operations            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UOPS_RETIRED                                                                 |
|            Uops retired (Precise Event)                                      |
|     :ALL                                                                     |
|            All uops that actually retired                                    |
|     :ANY                                                                     |
|            All uops that actually retired                                    |
|     :RETIRE_SLOTS                                                            |
|            number of retirement slots used non PEBS                          |
|     :STALL_CYCLES                                                            |
|            Cycles no executable uops retired (Precise Event)                 |
|     :TOTAL_CYCLES                                                            |
|            Number of cycles using always true condition applied to PEBS uops |
|            retired event                                                     |
|     :CORE_STALL_CYCLES                                                       |
|            Cycles no executable uops retired on core (Precise Event)         |
|     :STALL_OCCURRENCES                                                       |
|            Number of transitions from stalled to unstalled execution (Precise|
|             Event)                                                           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| TX_MEM                                                                       |
|            Transactional memory aborts                                       |
|     :ABORT_CONFLICT                                                          |
|            Number of times a transactional abort was signaled due to data con|
|            flict on a transactionally accessed address                       |
|     :ABORT_CAPACITY                                                          |
|            Number of times a transactional abort was signaled due to data cap|
|            acity limitation                                                  |
|     :ABORT_HLE_STORE_TO_ELIDED_LOCK                                          |
|            Number of times a HLE transactional execution aborted due to a non|
|             xrelease prefixed instruction writing to an elided lock in the el|
|            ision buffer                                                      |
|     :ABORT_HLE_ELISION_BUFFER_NOT_EMPTY                                      |
|            Number of times a HLE transactional execution aborted due to NoAll|
|            ocatedElisionBuffer being non-zero                                |
|     :ABORT_HLE_ELISION_BUFFER_MISMATCH                                       |
|            Number of times a HLE transaction execution aborted due to xreleas|
|            e lock not satisfying the address and value requirements in the el|
|            ision buffer                                                      |
|     :ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT                          |
|            Number of times a HLE transaction execution aborted due to an unsu|
|            pported read alignment from the elision buffer                    |
|     :ABORT_HLE_ELISION_BUFFER_FULL                                           |
|            Number of times a HLE clock could not be elided due to ElisionBuff|
|            erAvailable being zero                                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| TX_EXEC                                                                      |
|            Transactional execution                                           |
|     :MISC1                                                                   |
|            Number of times a class of instructions that may cause a transacti|
|            onal abort was executed. Since this is the count of execution, it |
|            may not always cause a transactional abort                        |
|     :MISC2                                                                   |
|            Number of times a class of instructions that may cause a transacti|
|            onal abort was executed inside a transactional region             |
|     :MISC3                                                                   |
|            Number of times an instruction execution caused the supported nest|
|             count to be exceeded                                             |
|     :MISC4                                                                   |
|            Number of times an instruction a xbegin instruction was executed i|
|            nside HLE transactional region                                    |
|     :MISC5                                                                   |
|            Number of times an instruction with HLE xacquire prefix was execut|
|            ed inside a RTM transactional region                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OFFCORE_REQUESTS_OUTSTANDING                                                 |
|            Outstanding offcore requests                                      |
|     :ALL_DATA_RD_CYCLES                                                      |
|            Cycles with cacheable data read transactions in the superQ (use wi|
|            th HT off only)                                                   |
|     :DEMAND_CODE_RD_CYCLES                                                   |
|            Cycles with demand code reads transactions in the superQ (use with|
|             HT off only)                                                     |
|     :DEMAND_DATA_RD_CYCLES                                                   |
|            Cycles with demand data read transactions in the superQ (use with |
|            HT off only)                                                      |
|     :ALL_DATA_RD                                                             |
|            Cacheable data read transactions in the superQ every cycle (use wi|
|            th HT off only)                                                   |
|     :DEMAND_CODE_RD                                                          |
|            Code read transactions in the superQ every cycle (use with HT off |
|            only)                                                             |
|     :DEMAND_DATA_RD                                                          |
|            Demand data read transactions in the superQ every cycle (use with |
|            HT off only)                                                      |
|     :DEMAND_DATA_RD_GE_6                                                     |
|            Cycles with at lesat 6 offcore outstanding demand data read reques|
|            ts in the uncore queue                                            |
|     :DEMAND_RFO                                                              |
|            Outstanding RFO (store) transactions in the superQ every cycle (us|
|            e with HT off only)                                               |
|     :DEMAND_RFO_CYCLES                                                       |
|            Cycles with outstanding RFO (store) transactions in the superQ (us|
|            e with HT off only)                                               |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| ILD_STALL                                                                    |
|            Instruction Length Decoder stalls                                 |
|     :LCP                                                                     |
|            Stall caused by changing prefix length of the instruction         |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| PAGE_WALKER_LOADS                                                            |
|            Page walker loads                                                 |
|     :DTLB_L1                                                                 |
|            Number of DTLB page walker loads that hit in the L1D and line fill|
|             buffer                                                           |
|     :ITLB_L1                                                                 |
|            Number of ITLB page walker loads that hit in the L1I and line fill|
|             buffer                                                           |
|     :DTLB_L2                                                                 |
|            Number of DTLB page walker loads that hit in the L2               |
|     :ITLB_L2                                                                 |
|            Number of ITLB page walker loads that hit in the L2               |
|     :DTLB_L3                                                                 |
|            Number of DTLB page walker loads that hit in the L3               |
|     :ITLB_L3                                                                 |
|            Number of ITLB page walker loads that hit in the L3               |
|     :DTLB_MEMORY                                                             |
|            Number of DTLB page walker loads that hit memory                  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| DSB2MITE_SWITCHES                                                            |
|            Number of DSB to MITE switches                                    |
|     :PENALTY_CYCLES                                                          |
|            Number of DSB to MITE switch true penalty cycles                  |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| EPT                                                                          |
|            Extended page table                                               |
|     :WALK_CYCLES                                                             |
|            Cycles for an extended page table walk                            |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| FP_ARITH                                                                     |
|            Floating-point                                                    |
|     :SCALAR_DOUBLE                                                           |
|            Number of scalar double precision floating-point arithmetic instru|
|            ctions (multiply by 1 to get flops)                               |
|     :SCALAR_SINGLE                                                           |
|            Number of scalar single precision floating-point arithmetic instru|
|            ctions (multiply by 1 to get flops)                               |
|     :SCALAR                                                                  |
|            Number of SSE/AVX computational scalar floating-point instructions|
|             retired. Applies to SSE* and AVX* scalar, double and single preci|
|            sion floating-point: ADD SUB MUL DIV MIN MAX RSQRT RCP SQRT FM(N)A|
|            DD/SUB. FM(N)ADD/SUB instructions count twice as they perform mult|
|            iple calculations per element                                     |
|     :128B_PACKED_DOUBLE                                                      |
|            Number of scalar 128-bit packed double precision floating-point ar|
|            ithmetic instructions (multiply by 2 to get flops)                |
|     :128B_PACKED_SINGLE                                                      |
|            Number of scalar 128-bit packed single precision floating-point ar|
|            ithmetic instructions (multiply by 4 to get flops)                |
|     :256B_PACKED_DOUBLE                                                      |
|            Number of scalar 256-bit packed double precision floating-point ar|
|            ithmetic instructions (multiply by 4 to get flops)                |
|     :256B_PACKED_SINGLE                                                      |
|            Number of scalar 256-bit packed single precision floating-point ar|
|            ithmetic instructions (multiply by 8 to get flops)                |
|     :PACKED                                                                  |
|            Number of SSE/AVX computational packed floating-point instructions|
|             retired. Applies to SSE* and AVX*, packed, double and single prec|
|            ision floating-point: ADD SUB MUL DIV MIN MAX RSQRT RCP SQRT DPP F|
|            M(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as the|
|            y perform multiple calculations per element                       |
|     :SINGLE                                                                  |
|            Number of SSE/AVX computational single precision floating-point in|
|            structions retired. Applies to SSE* and AVX*scalar, double and sin|
|            gle precision floating-point: ADD SUB MUL DIV MIN MAX RCP RSQRT SQ|
|            RT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twic|
|            e as they perform multiple calculations per element               |
|     :DOUBLE                                                                  |
|            Number of SSE/AVX computational double precision floating-point in|
|            structions retired. Applies to SSE* and AVX*scalar, double and sin|
|            gle precision floating-point: ADD SUB MUL DIV MIN MAX SQRT DPP FM(|
|            N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twice as they |
|            perform multiple calculations per element                         |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OFFCORE_REQUESTS_BUFFER                                                      |
|            Offcore reqest buffer                                             |
|     :SQ_FULL                                                                 |
|            Number of cycles the offcore requests buffer is full              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| UOPS_DISPATCHES_CANCELLED                                                    |
|            Micro-ops cancelled                                               |
|     :SIMD_PRF                                                                |
|            Number of uops cancelled after they were dispatched from the sched|
|            uler to the execution units when the total number of physical regi|
|            ster read ports exceeds the read bandwidth of the register file. T|
|            his umask applies to instructions: DPPS, DPPS, VPCMPESTRI, PCMPEST|
|            RI, VPCMPESTRM, PCMPESTRM, VFMADD*, VFMADDSUB*, VFMSUB*, VMSUBADD*|
|            , VFNMADD*, VFNMSUB*                                              |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| SQ_MISC                                                                      |
|            SuperQueue miscellaneous                                          |
|     :SPLIT_LOCK                                                              |
|            Number of split locks in the super queue (SQ)                     |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OFFCORE_RESPONSE_0                                                           |
|            Offcore response event (must provide at least one request type and|
|             either any_response or any combination of supplier + snoop)      |
|     :DMND_DATA_RD                                                            |
|            Request: number of demand and DCU prefetch data reads of full and |
|            partial cachelines as well as demand data page table entry cacheli|
|            ne reads. Does not count L2 data read prefetches or instruction fe|
|            tches                                                             |
|     :DMND_RFO                                                                |
|            Request: number of demand and DCU prefetch reads for ownership (RF|
|            O) requests generated by a write to data cacheline. Does not count|
|             L2 RFO prefetches                                                |
|     :DMND_IFETCH                                                             |
|            Request: number of demand and DCU prefetch instruction cacheline r|
|            eads. Does not count L2 code read prefetches                      |
|     :WB                                                                      |
|            Request: number of writebacks (modified to exclusive) transactions|
|                                                                              |
|     :PF_DATA_RD                                                              |
|            Request: number of data cacheline reads generated by L2 prefetcher|
|            s                                                                 |
|     :PF_RFO                                                                  |
|            Request: number of RFO requests generated by L2 prefetchers       |
|     :PF_IFETCH                                                               |
|            Request: number of code reads generated by L2 prefetchers         |
|     :PF_LLC_DATA_RD                                                          |
|            Request: number of L3 prefetcher requests to L2 for loads         |
|     :PF_LLC_RFO                                                              |
|            Request: number of RFO requests generated by L2 prefetcher        |
|     :PF_LLC_IFETCH                                                           |
|            Request: number of L2 prefetcher requests to L3 for instruction fe|
|            tches                                                             |
|     :BUS_LOCKS                                                               |
|            Request: number bus lock and split lock requests                  |
|     :STRM_ST                                                                 |
|            Request: number of streaming store requests                       |
|     :OTHER                                                                   |
|            Request: counts one of the following transaction types, including |
|            L3 invalidate, I/O, full or partial writes, WC or non-temporal sto|
|            res, CLFLUSH, Fences, lock, unlock, split lock                    |
|     :ANY_IFETCH                                                              |
|            Request: combination of PF_IFETCH | DMND_IFETCH | PF_LLC_IFETCH   |
|     :ANY_REQUEST                                                             |
|            Request: combination of all request umasks                        |
|     :ANY_DATA                                                                |
|            Request: combination of DMND_DATA | PF_DATA_RD | PF_LLC_DATA_RD   |
|     :ANY_RFO                                                                 |
|            Request: combination of DMND_RFO | PF_RFO | PF_LLC_RFO            |
|     :ANY_RESPONSE                                                            |
|            Response: count any response type                                 |
|     :NO_SUPP                                                                 |
|            Supplier: counts number of times supplier information is not avail|
|            able                                                              |
|     :L3_HITM                                                                 |
|            Supplier: counts L3 hits in M-state (initial lookup)              |
|     :LLC_HITM                                                                |
|            Supplier: counts L3 hits in M-state (initial lookup)              |
|     :L3_HITE                                                                 |
|            Supplier: counts L3 hits in E-state                               |
|     :LLC_HITE                                                                |
|            Supplier: counts L3 hits in E-state                               |
|     :L3_HITS                                                                 |
|            Supplier: counts L3 hits in S-state                               |
|     :LLC_HITS                                                                |
|            Supplier: counts L3 hits in S-state                               |
|     :L3_HITF                                                                 |
|            Supplier: counts L3 hits in F-state                               |
|     :LLC_HITF                                                                |
|            Supplier: counts L3 hits in F-state                               |
|     :L3_HITMESF                                                              |
|            Supplier: counts L3 hits in any state (M, E, S, F)                |
|     :LLC_HITMESF                                                             |
|            Supplier: counts L3 hits in any state (M, E, S, F)                |
|     :L3_HIT                                                                  |
|            Alias for L3_HITMESF                                              |
|     :LLC_HIT                                                                 |
|            Alias for LLC_HITMESF                                             |
|     :L3_MISS_LOCAL                                                           |
|            Supplier: counts L3 misses to local DRAM                          |
|     :LLC_MISS_LOCAL                                                          |
|            Supplier: counts L3 misses to local DRAM                          |
|     :LLC_MISS_LOCAL_DRAM                                                     |
|            Supplier: counts L3 misses to local DRAM                          |
|     :L3_MISS                                                                 |
|            Supplier: counts L3 misses to local or remote DRAM                |
|     :L3_MISS_REMOTE_HOP0                                                     |
|            Supplier: counts L3 misses to remote DRAM with 0 hop              |
|     :L3_MISS_REMOTE_HOP0_DRAM                                                |
|            Supplier: counts L3 misses to remote DRAM with 0 hop              |
|     :L3_MISS_REMOTE_HOP1                                                     |
|            Supplier: counts L3 misses to remote DRAM with 1 hop              |
|     :L3_MISS_REMOTE_HOP1_DRAM                                                |
|            Supplier: counts L3 misses to remote DRAM with 1 hop              |
|     :L3_MISS_REMOTE_HOP2P                                                    |
|            Supplier: counts L3 misses to remote DRAM with 2P hops            |
|     :L3_MISS_REMOTE_HOP2P_DRAM                                               |
|            Supplier: counts L3 misses to remote DRAM with 2P hops            |
|     :L3_MISS_REMOTE                                                          |
|            Supplier: counts L3 misses to remote node                         |
|     :L3_MISS_REMOTE_DRAM                                                     |
|            Supplier: counts L3 misses to remote node                         |
|     :SPL_HIT                                                                 |
|            Supplier: counts L3 supplier hit                                  |
|     :SNP_NONE                                                                |
|            Snoop: counts number of times no snoop-related information is avai|
|            lable                                                             |
|     :SNP_NOT_NEEDED                                                          |
|            Snoop: counts the number of times no snoop was needed to satisfy t|
|            he request                                                        |
|     :SNP_MISS                                                                |
|            Snoop: counts number of times a snoop was needed and it missed all|
|             snooped caches                                                   |
|     :SNP_NO_FWD                                                              |
|            Snoop: counts number of times a snoop was needed and it hit in at |
|            leas one snooped cache                                            |
|     :SNP_FWD                                                                 |
|            Snoop: counts number of times a snoop was needed and data was forw|
|            arded from a remote socket                                        |
|     :HITM                                                                    |
|            Snoop: counts number of times a snoop was needed and it hitM-ed in|
|             local or remote cache                                            |
|     :SNP_HITM                                                                |
|            Snoop: counts number of times a snoop was needed and it hitM-ed in|
|             local or remote cache                                            |
|     :NON_DRAM                                                                |
|            Snoop:  counts number of times target was a non-DRAM system addres|
|            s. This includes MMIO transactions                                |
|     :SNP_ANY                                                                 |
|            Snoop: any snoop reason                                           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
| OFFCORE_RESPONSE_1                                                           |
|            Offcore response event (must provide at least one request type and|
|             either any_response or any combination of supplier + snoop)      |
|     :DMND_DATA_RD                                                            |
|            Request: number of demand and DCU prefetch data reads of full and |
|            partial cachelines as well as demand data page table entry cacheli|
|            ne reads. Does not count L2 data read prefetches or instruction fe|
|            tches                                                             |
|     :DMND_RFO                                                                |
|            Request: number of demand and DCU prefetch reads for ownership (RF|
|            O) requests generated by a write to data cacheline. Does not count|
|             L2 RFO prefetches                                                |
|     :DMND_IFETCH                                                             |
|            Request: number of demand and DCU prefetch instruction cacheline r|
|            eads. Does not count L2 code read prefetches                      |
|     :WB                                                                      |
|            Request: number of writebacks (modified to exclusive) transactions|
|                                                                              |
|     :PF_DATA_RD                                                              |
|            Request: number of data cacheline reads generated by L2 prefetcher|
|            s                                                                 |
|     :PF_RFO                                                                  |
|            Request: number of RFO requests generated by L2 prefetchers       |
|     :PF_IFETCH                                                               |
|            Request: number of code reads generated by L2 prefetchers         |
|     :PF_LLC_DATA_RD                                                          |
|            Request: number of L3 prefetcher requests to L2 for loads         |
|     :PF_LLC_RFO                                                              |
|            Request: number of RFO requests generated by L2 prefetcher        |
|     :PF_LLC_IFETCH                                                           |
|            Request: number of L2 prefetcher requests to L3 for instruction fe|
|            tches                                                             |
|     :BUS_LOCKS                                                               |
|            Request: number bus lock and split lock requests                  |
|     :STRM_ST                                                                 |
|            Request: number of streaming store requests                       |
|     :OTHER                                                                   |
|            Request: counts one of the following transaction types, including |
|            L3 invalidate, I/O, full or partial writes, WC or non-temporal sto|
|            res, CLFLUSH, Fences, lock, unlock, split lock                    |
|     :ANY_IFETCH                                                              |
|            Request: combination of PF_IFETCH | DMND_IFETCH | PF_LLC_IFETCH   |
|     :ANY_REQUEST                                                             |
|            Request: combination of all request umasks                        |
|     :ANY_DATA                                                                |
|            Request: combination of DMND_DATA | PF_DATA_RD | PF_LLC_DATA_RD   |
|     :ANY_RFO                                                                 |
|            Request: combination of DMND_RFO | PF_RFO | PF_LLC_RFO            |
|     :ANY_RESPONSE                                                            |
|            Response: count any response type                                 |
|     :NO_SUPP                                                                 |
|            Supplier: counts number of times supplier information is not avail|
|            able                                                              |
|     :L3_HITM                                                                 |
|            Supplier: counts L3 hits in M-state (initial lookup)              |
|     :LLC_HITM                                                                |
|            Supplier: counts L3 hits in M-state (initial lookup)              |
|     :L3_HITE                                                                 |
|            Supplier: counts L3 hits in E-state                               |
|     :LLC_HITE                                                                |
|            Supplier: counts L3 hits in E-state                               |
|     :L3_HITS                                                                 |
|            Supplier: counts L3 hits in S-state                               |
|     :LLC_HITS                                                                |
|            Supplier: counts L3 hits in S-state                               |
|     :L3_HITF                                                                 |
|            Supplier: counts L3 hits in F-state                               |
|     :LLC_HITF                                                                |
|            Supplier: counts L3 hits in F-state                               |
|     :L3_HITMESF                                                              |
|            Supplier: counts L3 hits in any state (M, E, S, F)                |
|     :LLC_HITMESF                                                             |
|            Supplier: counts L3 hits in any state (M, E, S, F)                |
|     :L3_HIT                                                                  |
|            Alias for L3_HITMESF                                              |
|     :LLC_HIT                                                                 |
|            Alias for LLC_HITMESF                                             |
|     :L3_MISS_LOCAL                                                           |
|            Supplier: counts L3 misses to local DRAM                          |
|     :LLC_MISS_LOCAL                                                          |
|            Supplier: counts L3 misses to local DRAM                          |
|     :LLC_MISS_LOCAL_DRAM                                                     |
|            Supplier: counts L3 misses to local DRAM                          |
|     :L3_MISS                                                                 |
|            Supplier: counts L3 misses to local or remote DRAM                |
|     :L3_MISS_REMOTE_HOP0                                                     |
|            Supplier: counts L3 misses to remote DRAM with 0 hop              |
|     :L3_MISS_REMOTE_HOP0_DRAM                                                |
|            Supplier: counts L3 misses to remote DRAM with 0 hop              |
|     :L3_MISS_REMOTE_HOP1                                                     |
|            Supplier: counts L3 misses to remote DRAM with 1 hop              |
|     :L3_MISS_REMOTE_HOP1_DRAM                                                |
|            Supplier: counts L3 misses to remote DRAM with 1 hop              |
|     :L3_MISS_REMOTE_HOP2P                                                    |
|            Supplier: counts L3 misses to remote DRAM with 2P hops            |
|     :L3_MISS_REMOTE_HOP2P_DRAM                                               |
|            Supplier: counts L3 misses to remote DRAM with 2P hops            |
|     :L3_MISS_REMOTE                                                          |
|            Supplier: counts L3 misses to remote node                         |
|     :L3_MISS_REMOTE_DRAM                                                     |
|            Supplier: counts L3 misses to remote node                         |
|     :SPL_HIT                                                                 |
|            Supplier: counts L3 supplier hit                                  |
|     :SNP_NONE                                                                |
|            Snoop: counts number of times no snoop-related information is avai|
|            lable                                                             |
|     :SNP_NOT_NEEDED                                                          |
|            Snoop: counts the number of times no snoop was needed to satisfy t|
|            he request                                                        |
|     :SNP_MISS                                                                |
|            Snoop: counts number of times a snoop was needed and it missed all|
|             snooped caches                                                   |
|     :SNP_NO_FWD                                                              |
|            Snoop: counts number of times a snoop was needed and it hit in at |
|            leas one snooped cache                                            |
|     :SNP_FWD                                                                 |
|            Snoop: counts number of times a snoop was needed and data was forw|
|            arded from a remote socket                                        |
|     :HITM                                                                    |
|            Snoop: counts number of times a snoop was needed and it hitM-ed in|
|             local or remote cache                                            |
|     :SNP_HITM                                                                |
|            Snoop: counts number of times a snoop was needed and it hitM-ed in|
|             local or remote cache                                            |
|     :NON_DRAM                                                                |
|            Snoop:  counts number of times target was a non-DRAM system addres|
|            s. This includes MMIO transactions                                |
|     :SNP_ANY                                                                 |
|            Snoop: any snoop reason                                           |
|     :e=0                                                                     |
|            edge level (may require counter-mask >= 1)                        |
|     :i=0                                                                     |
|            invert                                                            |
|     :c=0                                                                     |
|            counter-mask in range [0-255]                                     |
|     :t=0                                                                     |
|            measure any thread                                                |
|     :intx=0                                                                  |
|            monitor only inside transactional memory region                   |
|     :intxcp=0                                                                |
|            do not count occurrences inside aborted transactional memory regio|
|            n                                                                 |
|     :u=0                                                                     |
|            monitor at user level                                             |
|     :k=0                                                                     |
|            monitor at kernel level                                           |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: appio
===============================================================================
| appio:::READ_BYTES                                                           |
|            Bytes read                                                        |
--------------------------------------------------------------------------------
| appio:::READ_CALLS                                                           |
|            Number of read calls                                              |
--------------------------------------------------------------------------------
| appio:::READ_ERR                                                             |
|            Number of read calls that resulted in an error                    |
--------------------------------------------------------------------------------
| appio:::READ_INTERRUPTED                                                     |
|            Number of read calls that timed out or were interruped            |
--------------------------------------------------------------------------------
| appio:::READ_WOULD_BLOCK                                                     |
|            Number of read calls that would have blocked                      |
--------------------------------------------------------------------------------
| appio:::READ_SHORT                                                           |
|            Number of read calls that returned less bytes than requested      |
--------------------------------------------------------------------------------
| appio:::READ_EOF                                                             |
|            Number of read calls that returned an EOF                         |
--------------------------------------------------------------------------------
| appio:::READ_BLOCK_SIZE                                                      |
|            Average block size of reads                                       |
--------------------------------------------------------------------------------
| appio:::READ_USEC                                                            |
|            Real microseconds spent in reads                                  |
--------------------------------------------------------------------------------
| appio:::WRITE_BYTES                                                          |
|            Bytes written                                                     |
--------------------------------------------------------------------------------
| appio:::WRITE_CALLS                                                          |
|            Number of write calls                                             |
--------------------------------------------------------------------------------
| appio:::WRITE_ERR                                                            |
|            Number of write calls that resulted in an error                   |
--------------------------------------------------------------------------------
| appio:::WRITE_SHORT                                                          |
|            Number of write calls that wrote less bytes than requested        |
--------------------------------------------------------------------------------
| appio:::WRITE_INTERRUPTED                                                    |
|            Number of write calls that timed out or were interrupted          |
--------------------------------------------------------------------------------
| appio:::WRITE_WOULD_BLOCK                                                    |
|            Number of write calls that would have blocked                     |
--------------------------------------------------------------------------------
| appio:::WRITE_BLOCK_SIZE                                                     |
|            Mean block size of writes                                         |
--------------------------------------------------------------------------------
| appio:::WRITE_USEC                                                           |
|            Real microseconds spent in writes                                 |
--------------------------------------------------------------------------------
| appio:::OPEN_CALLS                                                           |
|            Number of open calls                                              |
--------------------------------------------------------------------------------
| appio:::OPEN_ERR                                                             |
|            Number of open calls that resulted in an error                    |
--------------------------------------------------------------------------------
| appio:::OPEN_FDS                                                             |
|            Number of currently open descriptors                              |
--------------------------------------------------------------------------------
| appio:::SELECT_USEC                                                          |
|            Real microseconds spent in select calls                           |
--------------------------------------------------------------------------------
| appio:::RECV_BYTES                                                           |
|            Bytes read in recv/recvmsg/recvfrom                               |
--------------------------------------------------------------------------------
| appio:::RECV_CALLS                                                           |
|            Number of recv/recvmsg/recvfrom calls                             |
--------------------------------------------------------------------------------
| appio:::RECV_ERR                                                             |
|            Number of recv/recvmsg/recvfrom calls that resulted in an error   |
--------------------------------------------------------------------------------
| appio:::RECV_INTERRUPTED                                                     |
|            Number of recv/recvmsg/recvfrom calls that timed out or were inter|
|            ruped                                                             |
--------------------------------------------------------------------------------
| appio:::RECV_WOULD_BLOCK                                                     |
|            Number of recv/recvmsg/recvfrom calls that would have blocked     |
--------------------------------------------------------------------------------
| appio:::RECV_SHORT                                                           |
|            Number of recv/recvmsg/recvfrom calls that returned less bytes tha|
|            n requested                                                       |
--------------------------------------------------------------------------------
| appio:::RECV_EOF                                                             |
|            Number of recv/recvmsg/recvfrom calls that returned an EOF        |
--------------------------------------------------------------------------------
| appio:::RECV_BLOCK_SIZE                                                      |
|            Average block size of recv/recvmsg/recvfrom                       |
--------------------------------------------------------------------------------
| appio:::RECV_USEC                                                            |
|            Real microseconds spent in recv/recvmsg/recvfrom                  |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_BYTES                                                      |
|            Bytes read from socket                                            |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_CALLS                                                      |
|            Number of read calls on socket                                    |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_ERR                                                        |
|            Number of read calls on socket that resulted in an error          |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_SHORT                                                      |
|            Number of read calls on socket that returned less bytes than reque|
|            sted                                                              |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_WOULD_BLOCK                                                |
|            Number of read calls on socket that would have blocked            |
--------------------------------------------------------------------------------
| appio:::SOCK_READ_USEC                                                       |
|            Real microseconds spent in read(s) on socket(s)                   |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_BYTES                                                     |
|            Bytes written to socket                                           |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_CALLS                                                     |
|            Number of write calls to socket                                   |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_ERR                                                       |
|            Number of write calls to socket that resulted in an error         |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_SHORT                                                     |
|            Number of write calls to socket that wrote less bytes than request|
|            ed                                                                |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_WOULD_BLOCK                                               |
|            Number of write calls to socket that would have blocked           |
--------------------------------------------------------------------------------
| appio:::SOCK_WRITE_USEC                                                      |
|            Real microseconds spent in write(s) to socket(s)                  |
--------------------------------------------------------------------------------
| appio:::SEEK_CALLS                                                           |
|            Number of seek calls                                              |
--------------------------------------------------------------------------------
| appio:::SEEK_ABS_STRIDE_SIZE                                                 |
|            Average absolute stride size of seeks                             |
--------------------------------------------------------------------------------
| appio:::SEEK_USEC                                                            |
|            Real microseconds spent in seek calls                             |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: coretemp
===============================================================================
| coretemp:::hwmon0:temp1_input                                                |
|            degrees C, i350bb module, label loc1                              |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp1_input                                                |
|            degrees C, coretemp module, label Physical id 0                   |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp2_input                                                |
|            degrees C, coretemp module, label Core 0                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp3_input                                                |
|            degrees C, coretemp module, label Core 1                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp4_input                                                |
|            degrees C, coretemp module, label Core 2                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp5_input                                                |
|            degrees C, coretemp module, label Core 3                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp6_input                                                |
|            degrees C, coretemp module, label Core 4                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp7_input                                                |
|            degrees C, coretemp module, label Core 5                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp8_input                                                |
|            degrees C, coretemp module, label Core 6                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp10_input                                               |
|            degrees C, coretemp module, label Core 8                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp11_input                                               |
|            degrees C, coretemp module, label Core 9                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp12_input                                               |
|            degrees C, coretemp module, label Core 10                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp13_input                                               |
|            degrees C, coretemp module, label Core 11                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp14_input                                               |
|            degrees C, coretemp module, label Core 12                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp15_input                                               |
|            degrees C, coretemp module, label Core 13                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon2:temp16_input                                               |
|            degrees C, coretemp module, label Core 14                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp1_input                                                |
|            degrees C, coretemp module, label Physical id 1                   |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp2_input                                                |
|            degrees C, coretemp module, label Core 0                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp3_input                                                |
|            degrees C, coretemp module, label Core 1                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp4_input                                                |
|            degrees C, coretemp module, label Core 2                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp5_input                                                |
|            degrees C, coretemp module, label Core 3                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp6_input                                                |
|            degrees C, coretemp module, label Core 4                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp7_input                                                |
|            degrees C, coretemp module, label Core 5                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp8_input                                                |
|            degrees C, coretemp module, label Core 6                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp10_input                                               |
|            degrees C, coretemp module, label Core 8                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp11_input                                               |
|            degrees C, coretemp module, label Core 9                          |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp12_input                                               |
|            degrees C, coretemp module, label Core 10                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp13_input                                               |
|            degrees C, coretemp module, label Core 11                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp14_input                                               |
|            degrees C, coretemp module, label Core 12                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp15_input                                               |
|            degrees C, coretemp module, label Core 13                         |
--------------------------------------------------------------------------------
| coretemp:::hwmon3:temp16_input                                               |
|            degrees C, coretemp module, label Core 14                         |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: example
===============================================================================
| example:::EXAMPLE_ZERO                                                       |
|            This is an example counter, that always returns 0                 |
--------------------------------------------------------------------------------
| example:::EXAMPLE_CONSTANT                                                   |
|            This is an example counter, that always returns a constant value o|
|            f 42                                                              |
--------------------------------------------------------------------------------
| example:::EXAMPLE_AUTOINC                                                    |
|            This is an example counter, that reports a per-thread  auto-increm|
|            enting value                                                      |
--------------------------------------------------------------------------------
| example:::EXAMPLE_GLOBAL_AUTOINC                                             |
|            This is an example counter, that reports a global auto-incrementin|
|            g value                                                           |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: lmsensors
===============================================================================
| LM_SENSORS:::LM_SENSORS.i350bb-pci-8100.loc1.temp1_input                     |
|            LM_SENSORS.i350bb-pci-8100.loc1.temp1_input                       |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.i350bb-pci-8100.loc1.temp1_max                       |
|            LM_SENSORS.i350bb-pci-8100.loc1.temp1_max                         |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.i350bb-pci-8100.loc1.temp1_crit                      |
|            LM_SENSORS.i350bb-pci-8100.loc1.temp1_crit                        |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.power_meter-acpi-0.power1.power1_average             |
|            LM_SENSORS.power_meter-acpi-0.power1.power1_average               |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.power_meter-acpi-0.power1.power1_average_interval    |
|            LM_SENSORS.power_meter-acpi-0.power1.power1_average_interval      |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_input          |
|            LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_input            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_max            |
|            LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_max              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_crit           |
|            LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_crit             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_crit_alarm     |
|            LM_SENSORS.coretemp-isa-0000.Physical id 0.temp1_crit_alarm       |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 0.temp2_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 0.temp2_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 0.temp2_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 0.temp2_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 0.temp2_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 0.temp2_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 0.temp2_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 0.temp2_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 1.temp3_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 1.temp3_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 1.temp3_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 1.temp3_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 1.temp3_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 1.temp3_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 1.temp3_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 1.temp3_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 2.temp4_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 2.temp4_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 2.temp4_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 2.temp4_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 2.temp4_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 2.temp4_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 2.temp4_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 2.temp4_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 3.temp5_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 3.temp5_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 3.temp5_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 3.temp5_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 3.temp5_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 3.temp5_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 3.temp5_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 3.temp5_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 4.temp6_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 4.temp6_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 4.temp6_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 4.temp6_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 4.temp6_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 4.temp6_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 4.temp6_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 4.temp6_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 5.temp7_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 5.temp7_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 5.temp7_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 5.temp7_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 5.temp7_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 5.temp7_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 5.temp7_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 5.temp7_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 6.temp8_input                 |
|            LM_SENSORS.coretemp-isa-0000.Core 6.temp8_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 6.temp8_max                   |
|            LM_SENSORS.coretemp-isa-0000.Core 6.temp8_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 6.temp8_crit                  |
|            LM_SENSORS.coretemp-isa-0000.Core 6.temp8_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 6.temp8_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0000.Core 6.temp8_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 8.temp10_input                |
|            LM_SENSORS.coretemp-isa-0000.Core 8.temp10_input                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 8.temp10_max                  |
|            LM_SENSORS.coretemp-isa-0000.Core 8.temp10_max                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 8.temp10_crit                 |
|            LM_SENSORS.coretemp-isa-0000.Core 8.temp10_crit                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 8.temp10_crit_alarm           |
|            LM_SENSORS.coretemp-isa-0000.Core 8.temp10_crit_alarm             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 9.temp11_input                |
|            LM_SENSORS.coretemp-isa-0000.Core 9.temp11_input                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 9.temp11_max                  |
|            LM_SENSORS.coretemp-isa-0000.Core 9.temp11_max                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 9.temp11_crit                 |
|            LM_SENSORS.coretemp-isa-0000.Core 9.temp11_crit                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 9.temp11_crit_alarm           |
|            LM_SENSORS.coretemp-isa-0000.Core 9.temp11_crit_alarm             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 10.temp12_input               |
|            LM_SENSORS.coretemp-isa-0000.Core 10.temp12_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 10.temp12_max                 |
|            LM_SENSORS.coretemp-isa-0000.Core 10.temp12_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 10.temp12_crit                |
|            LM_SENSORS.coretemp-isa-0000.Core 10.temp12_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 10.temp12_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0000.Core 10.temp12_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 11.temp13_input               |
|            LM_SENSORS.coretemp-isa-0000.Core 11.temp13_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 11.temp13_max                 |
|            LM_SENSORS.coretemp-isa-0000.Core 11.temp13_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 11.temp13_crit                |
|            LM_SENSORS.coretemp-isa-0000.Core 11.temp13_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 11.temp13_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0000.Core 11.temp13_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 12.temp14_input               |
|            LM_SENSORS.coretemp-isa-0000.Core 12.temp14_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 12.temp14_max                 |
|            LM_SENSORS.coretemp-isa-0000.Core 12.temp14_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 12.temp14_crit                |
|            LM_SENSORS.coretemp-isa-0000.Core 12.temp14_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 12.temp14_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0000.Core 12.temp14_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 13.temp15_input               |
|            LM_SENSORS.coretemp-isa-0000.Core 13.temp15_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 13.temp15_max                 |
|            LM_SENSORS.coretemp-isa-0000.Core 13.temp15_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 13.temp15_crit                |
|            LM_SENSORS.coretemp-isa-0000.Core 13.temp15_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 13.temp15_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0000.Core 13.temp15_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 14.temp16_input               |
|            LM_SENSORS.coretemp-isa-0000.Core 14.temp16_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 14.temp16_max                 |
|            LM_SENSORS.coretemp-isa-0000.Core 14.temp16_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 14.temp16_crit                |
|            LM_SENSORS.coretemp-isa-0000.Core 14.temp16_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0000.Core 14.temp16_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0000.Core 14.temp16_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_input          |
|            LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_input            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_max            |
|            LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_max              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_crit           |
|            LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_crit             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_crit_alarm     |
|            LM_SENSORS.coretemp-isa-0001.Physical id 1.temp1_crit_alarm       |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 0.temp2_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 0.temp2_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 0.temp2_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 0.temp2_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 0.temp2_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 0.temp2_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 0.temp2_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 0.temp2_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 1.temp3_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 1.temp3_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 1.temp3_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 1.temp3_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 1.temp3_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 1.temp3_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 1.temp3_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 1.temp3_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 2.temp4_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 2.temp4_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 2.temp4_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 2.temp4_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 2.temp4_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 2.temp4_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 2.temp4_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 2.temp4_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 3.temp5_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 3.temp5_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 3.temp5_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 3.temp5_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 3.temp5_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 3.temp5_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 3.temp5_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 3.temp5_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 4.temp6_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 4.temp6_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 4.temp6_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 4.temp6_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 4.temp6_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 4.temp6_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 4.temp6_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 4.temp6_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 5.temp7_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 5.temp7_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 5.temp7_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 5.temp7_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 5.temp7_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 5.temp7_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 5.temp7_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 5.temp7_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 6.temp8_input                 |
|            LM_SENSORS.coretemp-isa-0001.Core 6.temp8_input                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 6.temp8_max                   |
|            LM_SENSORS.coretemp-isa-0001.Core 6.temp8_max                     |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 6.temp8_crit                  |
|            LM_SENSORS.coretemp-isa-0001.Core 6.temp8_crit                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 6.temp8_crit_alarm            |
|            LM_SENSORS.coretemp-isa-0001.Core 6.temp8_crit_alarm              |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 8.temp10_input                |
|            LM_SENSORS.coretemp-isa-0001.Core 8.temp10_input                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 8.temp10_max                  |
|            LM_SENSORS.coretemp-isa-0001.Core 8.temp10_max                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 8.temp10_crit                 |
|            LM_SENSORS.coretemp-isa-0001.Core 8.temp10_crit                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 8.temp10_crit_alarm           |
|            LM_SENSORS.coretemp-isa-0001.Core 8.temp10_crit_alarm             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 9.temp11_input                |
|            LM_SENSORS.coretemp-isa-0001.Core 9.temp11_input                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 9.temp11_max                  |
|            LM_SENSORS.coretemp-isa-0001.Core 9.temp11_max                    |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 9.temp11_crit                 |
|            LM_SENSORS.coretemp-isa-0001.Core 9.temp11_crit                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 9.temp11_crit_alarm           |
|            LM_SENSORS.coretemp-isa-0001.Core 9.temp11_crit_alarm             |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 10.temp12_input               |
|            LM_SENSORS.coretemp-isa-0001.Core 10.temp12_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 10.temp12_max                 |
|            LM_SENSORS.coretemp-isa-0001.Core 10.temp12_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 10.temp12_crit                |
|            LM_SENSORS.coretemp-isa-0001.Core 10.temp12_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 10.temp12_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0001.Core 10.temp12_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 11.temp13_input               |
|            LM_SENSORS.coretemp-isa-0001.Core 11.temp13_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 11.temp13_max                 |
|            LM_SENSORS.coretemp-isa-0001.Core 11.temp13_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 11.temp13_crit                |
|            LM_SENSORS.coretemp-isa-0001.Core 11.temp13_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 11.temp13_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0001.Core 11.temp13_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 12.temp14_input               |
|            LM_SENSORS.coretemp-isa-0001.Core 12.temp14_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 12.temp14_max                 |
|            LM_SENSORS.coretemp-isa-0001.Core 12.temp14_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 12.temp14_crit                |
|            LM_SENSORS.coretemp-isa-0001.Core 12.temp14_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 12.temp14_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0001.Core 12.temp14_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 13.temp15_input               |
|            LM_SENSORS.coretemp-isa-0001.Core 13.temp15_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 13.temp15_max                 |
|            LM_SENSORS.coretemp-isa-0001.Core 13.temp15_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 13.temp15_crit                |
|            LM_SENSORS.coretemp-isa-0001.Core 13.temp15_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 13.temp15_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0001.Core 13.temp15_crit_alarm            |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 14.temp16_input               |
|            LM_SENSORS.coretemp-isa-0001.Core 14.temp16_input                 |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 14.temp16_max                 |
|            LM_SENSORS.coretemp-isa-0001.Core 14.temp16_max                   |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 14.temp16_crit                |
|            LM_SENSORS.coretemp-isa-0001.Core 14.temp16_crit                  |
--------------------------------------------------------------------------------
| LM_SENSORS:::LM_SENSORS.coretemp-isa-0001.Core 14.temp16_crit_alarm          |
|            LM_SENSORS.coretemp-isa-0001.Core 14.temp16_crit_alarm            |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: lustre
===============================================================================
| lustre:::lustre-ffff8820353b9800/stats+_llread                               |
|            bytes read on this lustre client                                  |
--------------------------------------------------------------------------------
| lustre:::lustre-ffff8820353b9800/stats+_llwrite                              |
|            bytes written on this lustre client                               |
--------------------------------------------------------------------------------
| lustre:::lustre-ffff8820353b9800/stats+_wrong_readahead                      |
|            bytes read but discarded due to readahead                         |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: net
===============================================================================
| net:::en0:rx:bytes                                                           |
|            en0 receive bytes                                                 |
--------------------------------------------------------------------------------
| net:::en0:rx:packets                                                         |
|            en0 receive packets                                               |
--------------------------------------------------------------------------------
| net:::en0:rx:errors                                                          |
|            en0 receive errors                                                |
--------------------------------------------------------------------------------
| net:::en0:rx:dropped                                                         |
|            en0 receive dropped                                               |
--------------------------------------------------------------------------------
| net:::en0:rx:fifo                                                            |
|            en0 receive fifo                                                  |
--------------------------------------------------------------------------------
| net:::en0:rx:frame                                                           |
|            en0 receive frame                                                 |
--------------------------------------------------------------------------------
| net:::en0:rx:compressed                                                      |
|            en0 receive compressed                                            |
--------------------------------------------------------------------------------
| net:::en0:rx:multicast                                                       |
|            en0 receive multicast                                             |
--------------------------------------------------------------------------------
| net:::en0:tx:bytes                                                           |
|            en0 transmit bytes                                                |
--------------------------------------------------------------------------------
| net:::en0:tx:packets                                                         |
|            en0 transmit packets                                              |
--------------------------------------------------------------------------------
| net:::en0:tx:errors                                                          |
|            en0 transmit errors                                               |
--------------------------------------------------------------------------------
| net:::en0:tx:dropped                                                         |
|            en0 transmit dropped                                              |
--------------------------------------------------------------------------------
| net:::en0:tx:fifo                                                            |
|            en0 transmit fifo                                                 |
--------------------------------------------------------------------------------
| net:::en0:tx:colls                                                           |
|            en0 transmit colls                                                |
--------------------------------------------------------------------------------
| net:::en0:tx:carrier                                                         |
|            en0 transmit carrier                                              |
--------------------------------------------------------------------------------
| net:::en0:tx:compressed                                                      |
|            en0 transmit compressed                                           |
--------------------------------------------------------------------------------
| net:::eno2:rx:bytes                                                          |
|            eno2 receive bytes                                                |
--------------------------------------------------------------------------------
| net:::eno2:rx:packets                                                        |
|            eno2 receive packets                                              |
--------------------------------------------------------------------------------
| net:::eno2:rx:errors                                                         |
|            eno2 receive errors                                               |
--------------------------------------------------------------------------------
| net:::eno2:rx:dropped                                                        |
|            eno2 receive dropped                                              |
--------------------------------------------------------------------------------
| net:::eno2:rx:fifo                                                           |
|            eno2 receive fifo                                                 |
--------------------------------------------------------------------------------
| net:::eno2:rx:frame                                                          |
|            eno2 receive frame                                                |
--------------------------------------------------------------------------------
| net:::eno2:rx:compressed                                                     |
|            eno2 receive compressed                                           |
--------------------------------------------------------------------------------
| net:::eno2:rx:multicast                                                      |
|            eno2 receive multicast                                            |
--------------------------------------------------------------------------------
| net:::eno2:tx:bytes                                                          |
|            eno2 transmit bytes                                               |
--------------------------------------------------------------------------------
| net:::eno2:tx:packets                                                        |
|            eno2 transmit packets                                             |
--------------------------------------------------------------------------------
| net:::eno2:tx:errors                                                         |
|            eno2 transmit errors                                              |
--------------------------------------------------------------------------------
| net:::eno2:tx:dropped                                                        |
|            eno2 transmit dropped                                             |
--------------------------------------------------------------------------------
| net:::eno2:tx:fifo                                                           |
|            eno2 transmit fifo                                                |
--------------------------------------------------------------------------------
| net:::eno2:tx:colls                                                          |
|            eno2 transmit colls                                               |
--------------------------------------------------------------------------------
| net:::eno2:tx:carrier                                                        |
|            eno2 transmit carrier                                             |
--------------------------------------------------------------------------------
| net:::eno2:tx:compressed                                                     |
|            eno2 transmit compressed                                          |
--------------------------------------------------------------------------------
| net:::lo:rx:bytes                                                            |
|            lo receive bytes                                                  |
--------------------------------------------------------------------------------
| net:::lo:rx:packets                                                          |
|            lo receive packets                                                |
--------------------------------------------------------------------------------
| net:::lo:rx:errors                                                           |
|            lo receive errors                                                 |
--------------------------------------------------------------------------------
| net:::lo:rx:dropped                                                          |
|            lo receive dropped                                                |
--------------------------------------------------------------------------------
| net:::lo:rx:fifo                                                             |
|            lo receive fifo                                                   |
--------------------------------------------------------------------------------
| net:::lo:rx:frame                                                            |
|            lo receive frame                                                  |
--------------------------------------------------------------------------------
| net:::lo:rx:compressed                                                       |
|            lo receive compressed                                             |
--------------------------------------------------------------------------------
| net:::lo:rx:multicast                                                        |
|            lo receive multicast                                              |
--------------------------------------------------------------------------------
| net:::lo:tx:bytes                                                            |
|            lo transmit bytes                                                 |
--------------------------------------------------------------------------------
| net:::lo:tx:packets                                                          |
|            lo transmit packets                                               |
--------------------------------------------------------------------------------
| net:::lo:tx:errors                                                           |
|            lo transmit errors                                                |
--------------------------------------------------------------------------------
| net:::lo:tx:dropped                                                          |
|            lo transmit dropped                                               |
--------------------------------------------------------------------------------
| net:::lo:tx:fifo                                                             |
|            lo transmit fifo                                                  |
--------------------------------------------------------------------------------
| net:::lo:tx:colls                                                            |
|            lo transmit colls                                                 |
--------------------------------------------------------------------------------
| net:::lo:tx:carrier                                                          |
|            lo transmit carrier                                               |
--------------------------------------------------------------------------------
| net:::lo:tx:compressed                                                       |
|            lo transmit compressed                                            |
--------------------------------------------------------------------------------
| net:::ib0:rx:bytes                                                           |
|            ib0 receive bytes                                                 |
--------------------------------------------------------------------------------
| net:::ib0:rx:packets                                                         |
|            ib0 receive packets                                               |
--------------------------------------------------------------------------------
| net:::ib0:rx:errors                                                          |
|            ib0 receive errors                                                |
--------------------------------------------------------------------------------
| net:::ib0:rx:dropped                                                         |
|            ib0 receive dropped                                               |
--------------------------------------------------------------------------------
| net:::ib0:rx:fifo                                                            |
|            ib0 receive fifo                                                  |
--------------------------------------------------------------------------------
| net:::ib0:rx:frame                                                           |
|            ib0 receive frame                                                 |
--------------------------------------------------------------------------------
| net:::ib0:rx:compressed                                                      |
|            ib0 receive compressed                                            |
--------------------------------------------------------------------------------
| net:::ib0:rx:multicast                                                       |
|            ib0 receive multicast                                             |
--------------------------------------------------------------------------------
| net:::ib0:tx:bytes                                                           |
|            ib0 transmit bytes                                                |
--------------------------------------------------------------------------------
| net:::ib0:tx:packets                                                         |
|            ib0 transmit packets                                              |
--------------------------------------------------------------------------------
| net:::ib0:tx:errors                                                          |
|            ib0 transmit errors                                               |
--------------------------------------------------------------------------------
| net:::ib0:tx:dropped                                                         |
|            ib0 transmit dropped                                              |
--------------------------------------------------------------------------------
| net:::ib0:tx:fifo                                                            |
|            ib0 transmit fifo                                                 |
--------------------------------------------------------------------------------
| net:::ib0:tx:colls                                                           |
|            ib0 transmit colls                                                |
--------------------------------------------------------------------------------
| net:::ib0:tx:carrier                                                         |
|            ib0 transmit carrier                                              |
--------------------------------------------------------------------------------
| net:::ib0:tx:compressed                                                      |
|            ib0 transmit compressed                                           |
--------------------------------------------------------------------------------
===============================================================================
 Native Events in Component: stealtime
===============================================================================
| stealtime:::TOTAL                                                            |
|            Total amount of steal time                                        |
--------------------------------------------------------------------------------
| stealtime:::CPU1                                                             |
|            Steal time for CPU 1                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU2                                                             |
|            Steal time for CPU 2                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU3                                                             |
|            Steal time for CPU 3                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU4                                                             |
|            Steal time for CPU 4                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU5                                                             |
|            Steal time for CPU 5                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU6                                                             |
|            Steal time for CPU 6                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU7                                                             |
|            Steal time for CPU 7                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU8                                                             |
|            Steal time for CPU 8                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU9                                                             |
|            Steal time for CPU 9                                              |
--------------------------------------------------------------------------------
| stealtime:::CPU10                                                            |
|            Steal time for CPU 10                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU11                                                            |
|            Steal time for CPU 11                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU12                                                            |
|            Steal time for CPU 12                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU13                                                            |
|            Steal time for CPU 13                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU14                                                            |
|            Steal time for CPU 14                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU15                                                            |
|            Steal time for CPU 15                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU16                                                            |
|            Steal time for CPU 16                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU17                                                            |
|            Steal time for CPU 17                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU18                                                            |
|            Steal time for CPU 18                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU19                                                            |
|            Steal time for CPU 19                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU20                                                            |
|            Steal time for CPU 20                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU21                                                            |
|            Steal time for CPU 21                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU22                                                            |
|            Steal time for CPU 22                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU23                                                            |
|            Steal time for CPU 23                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU24                                                            |
|            Steal time for CPU 24                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU25                                                            |
|            Steal time for CPU 25                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU26                                                            |
|            Steal time for CPU 26                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU27                                                            |
|            Steal time for CPU 27                                             |
--------------------------------------------------------------------------------
| stealtime:::CPU28                                                            |
|            Steal time for CPU 28                                             |
--------------------------------------------------------------------------------

Total events reported: 463
native_avail.c                       PASSED
